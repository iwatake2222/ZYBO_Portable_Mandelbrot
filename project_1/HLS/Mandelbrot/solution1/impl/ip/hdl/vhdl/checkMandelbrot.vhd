-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity checkMandelbrot is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (95 downto 0);
    y_V : IN STD_LOGIC_VECTOR (95 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of checkMandelbrot is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv90_0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv97_C0000000000000000000000 : STD_LOGIC_VECTOR (96 downto 0) := "0000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_93_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal reg_110 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_49_cast3_fu_122_p1 : STD_LOGIC_VECTOR (193 downto 0);
    signal tmp_49_cast3_reg_270 : STD_LOGIC_VECTOR (193 downto 0);
    signal tmp_52_cast5_cast_fu_134_p1 : STD_LOGIC_VECTOR (193 downto 0);
    signal tmp_52_cast5_cast_reg_275 : STD_LOGIC_VECTOR (193 downto 0);
    signal tmp_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal loopNum_1_fu_144_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal loopNum_1_reg_284 : STD_LOGIC_VECTOR (6 downto 0);
    signal OP1_V_fu_150_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal OP1_V_reg_289 : STD_LOGIC_VECTOR (191 downto 0);
    signal OP1_V_1_fu_156_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal OP1_V_1_reg_295 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_2_reg_301 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_3_fu_169_p2 : STD_LOGIC_VECTOR (192 downto 0);
    signal p_Val2_3_reg_306 : STD_LOGIC_VECTOR (192 downto 0);
    signal zx_V_reg_311 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zy_V_reg_319 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_35_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_s_20_fu_225_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_s_20_reg_332 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_36_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_235_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_1_reg_342 : STD_LOGIC_VECTOR (95 downto 0);
    signal orgZy_V_reg_58 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_39_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal orgZx_V_reg_70 : STD_LOGIC_VECTOR (95 downto 0);
    signal loopNum_reg_81 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_93_p0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_93_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_32_fu_114_p3 : STD_LOGIC_VECTOR (185 downto 0);
    signal tmp_33_fu_126_p3 : STD_LOGIC_VECTOR (185 downto 0);
    signal tmp_1_fu_162_p1 : STD_LOGIC_VECTOR (192 downto 0);
    signal tmp_s_fu_166_p1 : STD_LOGIC_VECTOR (192 downto 0);
    signal tmp_34_fu_175_p1 : STD_LOGIC_VECTOR (193 downto 0);
    signal p_Val2_4_fu_178_p2 : STD_LOGIC_VECTOR (193 downto 0);
    signal p_Val2_5_fu_193_p3 : STD_LOGIC_VECTOR (192 downto 0);
    signal tmp_36_cast_fu_201_p1 : STD_LOGIC_VECTOR (193 downto 0);
    signal p_Val2_6_fu_205_p2 : STD_LOGIC_VECTOR (193 downto 0);
    signal zx_V_1_fu_240_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal zy_V_1_fu_245_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_38_fu_254_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal tmp_37_fu_250_p1 : STD_LOGIC_VECTOR (96 downto 0);
    signal r_V_1_fu_258_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component mandelbrot_mul_96bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (95 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (191 downto 0) );
    end component;



begin
    mandelbrot_mul_96bkb_U1 : component mandelbrot_mul_96bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 96,
        din1_WIDTH => 96,
        dout_WIDTH => 192)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_93_p0,
        din1 => grp_fu_93_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_93_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    loopNum_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_39_fu_264_p2 = ap_const_lv1_0) and (tmp_reg_280 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                loopNum_reg_81 <= loopNum_1_reg_284;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                loopNum_reg_81 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    orgZx_V_reg_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_39_fu_264_p2 = ap_const_lv1_0) and (tmp_reg_280 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                orgZx_V_reg_70 <= zx_V_reg_311;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                orgZx_V_reg_70 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    orgZy_V_reg_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_39_fu_264_p2 = ap_const_lv1_0) and (tmp_reg_280 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                orgZy_V_reg_58 <= zy_V_reg_319;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                orgZy_V_reg_58 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                OP1_V_1_reg_295 <= OP1_V_1_fu_156_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                OP1_V_reg_289 <= OP1_V_fu_150_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                loopNum_1_reg_284 <= loopNum_1_fu_144_p2;
                tmp_reg_280 <= tmp_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_1_reg_342 <= p_Val2_1_fu_235_p2;
                p_Val2_s_20_reg_332 <= p_Val2_s_20_fu_225_p2;
                tmp_35_reg_327 <= tmp_35_fu_220_p2;
                tmp_36_reg_337 <= tmp_36_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_2_reg_301 <= grp_fu_93_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_3_reg_306 <= p_Val2_3_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_110 <= grp_fu_93_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_49_cast3_reg_270(185 downto 90) <= tmp_49_cast3_fu_122_p1(185 downto 90);
                    tmp_52_cast5_cast_reg_275(185 downto 90) <= tmp_52_cast5_cast_fu_134_p1(185 downto 90);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                zx_V_reg_311 <= p_Val2_4_fu_178_p2(185 downto 90);
                zy_V_reg_319 <= p_Val2_6_fu_205_p2(185 downto 90);
            end if;
        end if;
    end process;
    tmp_49_cast3_reg_270(89 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tmp_49_cast3_reg_270(193 downto 186) <= "00000000";
    tmp_52_cast5_cast_reg_275(89 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tmp_52_cast5_cast_reg_275(193 downto 186) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_138_p2, tmp_reg_280, ap_CS_fsm_state2, ap_CS_fsm_state11, tmp_39_fu_264_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((tmp_reg_280 = ap_const_lv1_1) or (tmp_39_fu_264_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
        OP1_V_1_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(orgZy_V_reg_58),192));

        OP1_V_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(orgZx_V_reg_70),192));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_reg_280, ap_CS_fsm_state11, tmp_39_fu_264_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and ((tmp_reg_280 = ap_const_lv1_1) or (tmp_39_fu_264_p2 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_reg_280, ap_CS_fsm_state11, tmp_39_fu_264_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and ((tmp_reg_280 = ap_const_lv1_1) or (tmp_39_fu_264_p2 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= loopNum_reg_81;

    grp_fu_93_p0_assign_proc : process(ap_CS_fsm_state2, OP1_V_fu_150_p1, OP1_V_1_fu_156_p1, OP1_V_1_reg_295, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_93_p0 <= OP1_V_1_reg_295(96 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_93_p0 <= OP1_V_1_fu_156_p1(96 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_93_p0 <= OP1_V_fu_150_p1(96 - 1 downto 0);
        else 
            grp_fu_93_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_93_p1_assign_proc : process(ap_CS_fsm_state2, OP1_V_fu_150_p1, OP1_V_reg_289, OP1_V_1_fu_156_p1, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_93_p1 <= OP1_V_reg_289(96 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_93_p1 <= OP1_V_1_fu_156_p1(96 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_93_p1 <= OP1_V_fu_150_p1(96 - 1 downto 0);
        else 
            grp_fu_93_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    loopNum_1_fu_144_p2 <= std_logic_vector(unsigned(loopNum_reg_81) + unsigned(ap_const_lv7_1));
    p_Val2_1_fu_235_p2 <= std_logic_vector(unsigned(ap_const_lv96_0) - unsigned(zy_V_reg_319));
    p_Val2_3_fu_169_p2 <= std_logic_vector(unsigned(tmp_1_fu_162_p1) - unsigned(tmp_s_fu_166_p1));
    p_Val2_4_fu_178_p2 <= std_logic_vector(unsigned(tmp_49_cast3_reg_270) + unsigned(tmp_34_fu_175_p1));
    p_Val2_5_fu_193_p3 <= (reg_110 & ap_const_lv1_0);
    p_Val2_6_fu_205_p2 <= std_logic_vector(unsigned(tmp_52_cast5_cast_reg_275) + unsigned(tmp_36_cast_fu_201_p1));
    p_Val2_s_20_fu_225_p2 <= std_logic_vector(unsigned(ap_const_lv96_0) - unsigned(zx_V_reg_311));
    r_V_1_fu_258_p2 <= std_logic_vector(signed(tmp_38_fu_254_p1) + signed(tmp_37_fu_250_p1));
    tmp_1_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_110),193));
    tmp_32_fu_114_p3 <= (x_V & ap_const_lv90_0);
    tmp_33_fu_126_p3 <= (y_V & ap_const_lv90_0);
    tmp_34_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_3_reg_306),194));
    tmp_35_fu_220_p2 <= "1" when (signed(zx_V_reg_311) > signed(ap_const_lv96_0)) else "0";
    tmp_36_cast_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_5_fu_193_p3),194));
    tmp_36_fu_230_p2 <= "1" when (signed(zy_V_reg_319) > signed(ap_const_lv96_0)) else "0";
        tmp_37_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zx_V_1_fu_240_p3),97));

        tmp_38_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zy_V_1_fu_245_p3),97));

    tmp_39_fu_264_p2 <= "1" when (signed(r_V_1_fu_258_p2) > signed(ap_const_lv97_C0000000000000000000000)) else "0";
    tmp_49_cast3_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_114_p3),194));
    tmp_52_cast5_cast_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_126_p3),194));
    tmp_fu_138_p2 <= "1" when (loopNum_reg_81 = ap_const_lv7_7F) else "0";
    tmp_s_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_reg_301),193));
    zx_V_1_fu_240_p3 <= 
        zx_V_reg_311 when (tmp_35_reg_327(0) = '1') else 
        p_Val2_s_20_reg_332;
    zy_V_1_fu_245_p3 <= 
        zy_V_reg_319 when (tmp_36_reg_337(0) = '1') else 
        p_Val2_1_reg_342;
end behav;
