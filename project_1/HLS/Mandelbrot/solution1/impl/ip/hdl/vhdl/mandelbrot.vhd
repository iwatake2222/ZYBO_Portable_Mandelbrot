-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mandelbrot is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mandelbrot is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mandelbrot,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=50922989,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=176,HLS_SYN_FF=16190,HLS_SYN_LUT=12839}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv187_lc_1 : STD_LOGIC_VECTOR (186 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010110000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv193_lc_2 : STD_LOGIC_VECTOR (192 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010010";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv193_lc_3 : STD_LOGIC_VECTOR (192 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011010";
    constant ap_const_lv193_lc_4 : STD_LOGIC_VECTOR (192 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv18_1E0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000111100000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal vram_V : STD_LOGIC_VECTOR (31 downto 0);
    signal centerX_V : STD_LOGIC_VECTOR (95 downto 0);
    signal centerY_V : STD_LOGIC_VECTOR (95 downto 0);
    signal zoomHeight_V : STD_LOGIC_VECTOR (95 downto 0);
    signal updateColorMap : STD_LOGIC_VECTOR (7 downto 0);
    signal colorMap_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorMap_ce0 : STD_LOGIC;
    signal colorMap_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_colorMap_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal s_colorMap_ce0 : STD_LOGIC;
    signal s_colorMap_we0 : STD_LOGIC;
    signal s_colorMap_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_colorMap_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal s_colorMap_ce1 : STD_LOGIC;
    signal s_colorMap_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_11_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_reg_1697 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond1_reg_1697 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_473 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal reg_517 : STD_LOGIC_VECTOR (7 downto 0);
    signal centerX_V_read_reg_1341 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_reg_1346 : STD_LOGIC_VECTOR (29 downto 0);
    signal y_V_fu_556_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal y_V_reg_1356 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_35_reg_1366 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1372 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_546_p2 : STD_LOGIC_VECTOR (186 downto 0);
    signal p_Val2_s_reg_1376 : STD_LOGIC_VECTOR (186 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t_V_reg_1382 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_32_reg_1388 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_566_p2 : STD_LOGIC_VECTOR (192 downto 0);
    signal mul_reg_1394 : STD_LOGIC_VECTOR (192 downto 0);
    signal tmp_37_reg_1399 : STD_LOGIC_VECTOR (87 downto 0);
    signal p_lshr_reg_1404 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal neg_mul_fu_638_p2 : STD_LOGIC_VECTOR (192 downto 0);
    signal neg_mul_reg_1414 : STD_LOGIC_VECTOR (192 downto 0);
    signal p_neg_t_fu_646_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_neg_t_reg_1419 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal stepY_V_fu_681_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal stepY_V_reg_1424 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_1_fu_715_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_1_reg_1429 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_632_p2 : STD_LOGIC_VECTOR (192 downto 0);
    signal mul4_reg_1437 : STD_LOGIC_VECTOR (192 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_34_reg_1442 : STD_LOGIC_VECTOR (86 downto 0);
    signal neg_mul5_fu_730_p2 : STD_LOGIC_VECTOR (192 downto 0);
    signal neg_mul5_reg_1447 : STD_LOGIC_VECTOR (192 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_4_cast_fu_735_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_cast_reg_1452 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal stepX_V_fu_767_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal stepX_V_reg_1457 : STD_LOGIC_VECTOR (95 downto 0);
    signal i_1_fu_784_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_1468 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_7_fu_806_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_reg_1473 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1479 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1489 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_9_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_1499 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal cntY_1_fu_855_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal cntY_1_reg_1512 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal gmem_addr_reg_1517 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_block_state18_io : BOOLEAN;
    signal cntX_fu_886_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cntX_reg_1527 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_962_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_1552 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_912_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_s_16_reg_1559 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_927_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_3_reg_1564 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_942_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_5_reg_1569 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_957_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_7_reg_1574 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_2_fu_968_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_2_reg_1579 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal p_Val2_4_fu_973_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_4_reg_1584 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_6_fu_978_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_6_reg_1589 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_8_fu_983_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_Val2_8_reg_1594 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_i_cast1_fu_1010_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_cast1_reg_1599 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_checkMandelbrot_fu_484_ap_done : STD_LOGIC;
    signal grp_checkMandelbrot_fu_491_ap_done : STD_LOGIC;
    signal grp_checkMandelbrot_fu_498_ap_done : STD_LOGIC;
    signal grp_checkMandelbrot_fu_505_ap_done : STD_LOGIC;
    signal ap_block_state24_on_subcall_done : BOOLEAN;
    signal grp_checkMandelbrot_fu_491_ap_return : STD_LOGIC_VECTOR (6 downto 0);
    signal loopNum_1_reg_1614 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_checkMandelbrot_fu_498_ap_return : STD_LOGIC_VECTOR (6 downto 0);
    signal loopNum_2_reg_1620 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_checkMandelbrot_fu_505_ap_return : STD_LOGIC_VECTOR (6 downto 0);
    signal loopNum_3_reg_1626 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i1_fu_1066_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i1_reg_1637 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_i2_cast1_fu_1155_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i2_cast1_reg_1657 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_i3_fu_1211_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i3_reg_1677 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state31_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_block_state33_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_next_fu_1319_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal linebuf_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_V_load_reg_1711 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal p_rec_fu_1330_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_rec_reg_1716 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal y_V_1_fu_1336_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal y_V_1_reg_1721 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state31 : STD_LOGIC;
    signal linebuf_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal linebuf_V_ce0 : STD_LOGIC;
    signal linebuf_V_we0 : STD_LOGIC;
    signal linebuf_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_checkMandelbrot_fu_484_ap_start : STD_LOGIC;
    signal grp_checkMandelbrot_fu_484_ap_idle : STD_LOGIC;
    signal grp_checkMandelbrot_fu_484_ap_ready : STD_LOGIC;
    signal grp_checkMandelbrot_fu_484_ap_return : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_checkMandelbrot_fu_491_ap_start : STD_LOGIC;
    signal grp_checkMandelbrot_fu_491_ap_idle : STD_LOGIC;
    signal grp_checkMandelbrot_fu_491_ap_ready : STD_LOGIC;
    signal grp_checkMandelbrot_fu_498_ap_start : STD_LOGIC;
    signal grp_checkMandelbrot_fu_498_ap_idle : STD_LOGIC;
    signal grp_checkMandelbrot_fu_498_ap_ready : STD_LOGIC;
    signal grp_checkMandelbrot_fu_505_ap_start : STD_LOGIC;
    signal grp_checkMandelbrot_fu_505_ap_idle : STD_LOGIC;
    signal grp_checkMandelbrot_fu_505_ap_ready : STD_LOGIC;
    signal i_reg_418 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Val2_9_reg_429 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_0_rec_reg_439 : STD_LOGIC_VECTOR (17 downto 0);
    signal cntY_reg_451 : STD_LOGIC_VECTOR (8 downto 0);
    signal cntX_0_i_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_reg_grp_checkMandelbrot_fu_484_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_checkMandelbrot_fu_491_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_checkMandelbrot_fu_498_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_checkMandelbrot_fu_505_ap_start : STD_LOGIC := '0';
    signal tmp_45_i_fu_1018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_i_fu_1033_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_i_fu_1047_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_i1_fu_1076_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_i1_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_i1_fu_1109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_i2_fu_1163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_i2_fu_1178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_i2_fu_1192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_i3_fu_1221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_1235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_i3_fu_1266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_i3_fu_1281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_1295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_1325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal vram_V2_sum_cast_fu_870_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal val_assign_fu_1122_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_1_fu_1240_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_2_fu_1300_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_1_fu_536_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_546_p0 : STD_LOGIC_VECTOR (91 downto 0);
    signal tmp_4_fu_532_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_s_fu_552_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_566_p0 : STD_LOGIC_VECTOR (97 downto 0);
    signal p_neg_fu_614_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_632_p0 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_15_fu_643_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_36_fu_652_p4 : STD_LOGIC_VECTOR (87 downto 0);
    signal tmp_19_fu_661_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_20_fu_665_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_23_fu_668_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal neg_ti_fu_675_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal t_V2_fu_695_p4 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_24_fu_688_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_lshr_f_fu_704_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_6_fu_708_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_33_fu_738_p4 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_16_fu_747_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_17_fu_751_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_18_fu_754_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal neg_ti1_fu_761_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_38_fu_790_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_fu_794_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_802_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast1_fu_774_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_cast_fu_812_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_821_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_cast_fu_826_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_835_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_cast_fu_840_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_rec_cast_cast_fu_861_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal vram_V2_sum_fu_865_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_op_assign_fu_896_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_912_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_912_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal i_op_assign_1_fu_917_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_927_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_927_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal i_op_assign_2_fu_932_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_942_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_942_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal i_op_assign_3_fu_947_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_957_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_957_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal i_op_assign_cast_fu_904_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_cast1_fu_892_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_992_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i_cast_cast_fu_1000_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_cast9_cast_fu_988_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_fu_1004_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_cast_fu_1014_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_i_fu_1023_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_i_cast_fu_1029_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_i_fu_1038_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_48_i_cast_fu_1043_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_1055_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i1_cast_cast_fu_1062_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i1_cast8_cast_fu_1052_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i1_cast_fu_1072_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_cast1_fu_1081_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_i1_fu_1084_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_i1_cast_fu_1090_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_i1_fu_1099_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_48_i1_cast_fu_1105_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_1114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_1138_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i2_cast_cast_fu_1145_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i2_cast7_cast_fu_1135_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i2_fu_1149_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i2_cast_fu_1159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_i2_fu_1168_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_i2_cast_fu_1174_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_i2_fu_1183_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_48_i2_cast_fu_1188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_1200_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i3_cast_cast_fu_1207_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i3_cast6_cast_fu_1197_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i3_cast_fu_1217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_cast_fu_1231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_cast1_fu_1253_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_i3_fu_1256_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_i3_cast_fu_1262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_i3_fu_1271_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_48_i3_cast_fu_1277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_1286_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_cast_fu_1291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_912_ce : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_927_ce : STD_LOGIC;
    signal grp_fu_942_ce : STD_LOGIC;
    signal grp_fu_957_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_912_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_927_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_942_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_957_p00 : STD_LOGIC_VECTOR (95 downto 0);

    component checkMandelbrot IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (95 downto 0);
        y_V : IN STD_LOGIC_VECTOR (95 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component mandelbrot_mul_92eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (91 downto 0);
        din1 : IN STD_LOGIC_VECTOR (95 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (186 downto 0) );
    end component;


    component mandelbrot_mul_98fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (97 downto 0);
        din1 : IN STD_LOGIC_VECTOR (95 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (192 downto 0) );
    end component;


    component mandelbrot_mul_10g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (88 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component mandelbrot_s_colocud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mandelbrot_linebudEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mandelbrot_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        vram_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        centerX_V : OUT STD_LOGIC_VECTOR (95 downto 0);
        centerY_V : OUT STD_LOGIC_VECTOR (95 downto 0);
        zoomHeight_V : OUT STD_LOGIC_VECTOR (95 downto 0);
        updateColorMap : OUT STD_LOGIC_VECTOR (7 downto 0);
        colorMap_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        colorMap_ce0 : IN STD_LOGIC;
        colorMap_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mandelbrot_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    s_colorMap_U : component mandelbrot_s_colocud
    generic map (
        DataWidth => 8,
        AddressRange => 384,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s_colorMap_address0,
        ce0 => s_colorMap_ce0,
        we0 => s_colorMap_we0,
        d0 => colorMap_q0,
        q0 => s_colorMap_q0,
        address1 => s_colorMap_address1,
        ce1 => s_colorMap_ce1,
        q1 => s_colorMap_q1);

    mandelbrot_AXILiteS_s_axi_U : component mandelbrot_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        vram_V => vram_V,
        centerX_V => centerX_V,
        centerY_V => centerY_V,
        zoomHeight_V => zoomHeight_V,
        updateColorMap => updateColorMap,
        colorMap_address0 => colorMap_address0,
        colorMap_ce0 => colorMap_ce0,
        colorMap_q0 => colorMap_q0);

    mandelbrot_gmem_m_axi_U : component mandelbrot_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_1517,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1E0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => linebuf_V_load_reg_1711,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    linebuf_V_U : component mandelbrot_linebudEe
    generic map (
        DataWidth => 32,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_V_address0,
        ce0 => linebuf_V_ce0,
        we0 => linebuf_V_we0,
        d0 => linebuf_V_d0,
        q0 => linebuf_V_q0);

    grp_checkMandelbrot_fu_484 : component checkMandelbrot
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_checkMandelbrot_fu_484_ap_start,
        ap_done => grp_checkMandelbrot_fu_484_ap_done,
        ap_idle => grp_checkMandelbrot_fu_484_ap_idle,
        ap_ready => grp_checkMandelbrot_fu_484_ap_ready,
        x_V => p_Val2_2_reg_1579,
        y_V => p_Val2_9_reg_429,
        ap_return => grp_checkMandelbrot_fu_484_ap_return);

    grp_checkMandelbrot_fu_491 : component checkMandelbrot
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_checkMandelbrot_fu_491_ap_start,
        ap_done => grp_checkMandelbrot_fu_491_ap_done,
        ap_idle => grp_checkMandelbrot_fu_491_ap_idle,
        ap_ready => grp_checkMandelbrot_fu_491_ap_ready,
        x_V => p_Val2_4_reg_1584,
        y_V => p_Val2_9_reg_429,
        ap_return => grp_checkMandelbrot_fu_491_ap_return);

    grp_checkMandelbrot_fu_498 : component checkMandelbrot
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_checkMandelbrot_fu_498_ap_start,
        ap_done => grp_checkMandelbrot_fu_498_ap_done,
        ap_idle => grp_checkMandelbrot_fu_498_ap_idle,
        ap_ready => grp_checkMandelbrot_fu_498_ap_ready,
        x_V => p_Val2_6_reg_1589,
        y_V => p_Val2_9_reg_429,
        ap_return => grp_checkMandelbrot_fu_498_ap_return);

    grp_checkMandelbrot_fu_505 : component checkMandelbrot
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_checkMandelbrot_fu_505_ap_start,
        ap_done => grp_checkMandelbrot_fu_505_ap_done,
        ap_idle => grp_checkMandelbrot_fu_505_ap_idle,
        ap_ready => grp_checkMandelbrot_fu_505_ap_ready,
        x_V => p_Val2_8_reg_1594,
        y_V => p_Val2_9_reg_429,
        ap_return => grp_checkMandelbrot_fu_505_ap_return);

    mandelbrot_mul_92eOg_U5 : component mandelbrot_mul_92eOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 92,
        din1_WIDTH => 96,
        dout_WIDTH => 187)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_546_p0,
        din1 => t_V_1_fu_536_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_546_p2);

    mandelbrot_mul_98fYi_U6 : component mandelbrot_mul_98fYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 98,
        din1_WIDTH => 96,
        dout_WIDTH => 193)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_566_p0,
        din1 => t_V_1_fu_536_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_566_p2);

    mandelbrot_mul_98fYi_U7 : component mandelbrot_mul_98fYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 98,
        din1_WIDTH => 96,
        dout_WIDTH => 193)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_632_p0,
        din1 => t_V_reg_1382,
        ce => ap_const_logic_1,
        dout => grp_fu_632_p2);

    mandelbrot_mul_10g8j_U8 : component mandelbrot_mul_10g8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 10,
        din1_WIDTH => 89,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_912_p0,
        din1 => grp_fu_912_p1,
        ce => grp_fu_912_ce,
        dout => grp_fu_912_p2);

    mandelbrot_mul_10g8j_U9 : component mandelbrot_mul_10g8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 10,
        din1_WIDTH => 89,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_927_p0,
        din1 => grp_fu_927_p1,
        ce => grp_fu_927_ce,
        dout => grp_fu_927_p2);

    mandelbrot_mul_10g8j_U10 : component mandelbrot_mul_10g8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 10,
        din1_WIDTH => 89,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_942_p0,
        din1 => grp_fu_942_p1,
        ce => grp_fu_942_ce,
        dout => grp_fu_942_p2);

    mandelbrot_mul_10g8j_U11 : component mandelbrot_mul_10g8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 10,
        din1_WIDTH => 89,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_957_p0,
        din1 => grp_fu_957_p1,
        ce => grp_fu_957_ce,
        dout => grp_fu_957_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_11_fu_880_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state31)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_11_fu_880_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_checkMandelbrot_fu_484_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_checkMandelbrot_fu_484_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_reg_grp_checkMandelbrot_fu_484_ap_start <= ap_const_logic_1;
                elsif ((grp_checkMandelbrot_fu_484_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_checkMandelbrot_fu_484_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_checkMandelbrot_fu_491_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_checkMandelbrot_fu_491_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_reg_grp_checkMandelbrot_fu_491_ap_start <= ap_const_logic_1;
                elsif ((grp_checkMandelbrot_fu_491_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_checkMandelbrot_fu_491_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_checkMandelbrot_fu_498_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_checkMandelbrot_fu_498_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_reg_grp_checkMandelbrot_fu_498_ap_start <= ap_const_logic_1;
                elsif ((grp_checkMandelbrot_fu_498_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_checkMandelbrot_fu_498_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_checkMandelbrot_fu_505_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_checkMandelbrot_fu_505_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_reg_grp_checkMandelbrot_fu_505_ap_start <= ap_const_logic_1;
                elsif ((grp_checkMandelbrot_fu_505_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_checkMandelbrot_fu_505_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_11_fu_880_p2 = ap_const_lv1_1))) then
                    if ((ap_const_boolean_0 = ap_block_state18_io)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_exitcond1_reg_1697 = ap_const_lv1_0))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (gmem_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    cntX_0_i_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_10_fu_849_p2 = ap_const_lv1_0))) then 
                cntX_0_i_reg_462 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                cntX_0_i_reg_462 <= cntX_reg_1527;
            end if; 
        end if;
    end process;

    cntY_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                cntY_reg_451 <= cntY_1_reg_1512;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and ((exitcond_fu_778_p2 = ap_const_lv1_1) or (tmp_5_reg_1372 = ap_const_lv1_1)))) then 
                cntY_reg_451 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_5_reg_1372 = ap_const_lv1_0))) then 
                i_reg_418 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_reg_418 <= i_1_reg_1468;
            end if; 
        end if;
    end process;

    indvar_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_11_fu_880_p2 = ap_const_lv1_1))) then 
                indvar_reg_473 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_fu_1313_p2 = ap_const_lv1_0))) then 
                indvar_reg_473 <= indvar_next_fu_1319_p2;
            end if; 
        end if;
    end process;

    p_0_rec_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                p_0_rec_reg_439 <= p_rec_reg_1716;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and ((exitcond_fu_778_p2 = ap_const_lv1_1) or (tmp_5_reg_1372 = ap_const_lv1_1)))) then 
                p_0_rec_reg_439 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    p_Val2_9_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                p_Val2_9_reg_429 <= y_V_1_reg_1721;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and ((exitcond_fu_778_p2 = ap_const_lv1_1) or (tmp_5_reg_1372 = ap_const_lv1_1)))) then 
                p_Val2_9_reg_429 <= y_V_reg_1356;
            end if; 
        end if;
    end process;

    reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                reg_512 <= s_colorMap_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                reg_512 <= s_colorMap_q0;
            end if; 
        end if;
    end process;

    reg_517_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                reg_517 <= s_colorMap_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                reg_517 <= s_colorMap_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond1_reg_1697 <= exitcond1_reg_1697;
                exitcond1_reg_1697 <= exitcond1_fu_1313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                centerX_V_read_reg_1341 <= centerX_V;
                tmp_35_reg_1366 <= zoomHeight_V(94 downto 94);
                tmp_5_reg_1372 <= tmp_5_fu_580_p2;
                tmp_reg_1346 <= vram_V(31 downto 2);
                y_V_reg_1356 <= y_V_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                cntX_reg_1527 <= cntX_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                cntY_1_reg_1512 <= cntY_1_fu_855_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_10_fu_849_p2 = ap_const_lv1_0))) then
                    gmem_addr_reg_1517(30 downto 0) <= vram_V2_sum_cast_fu_870_p1(32 - 1 downto 0)(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_5_reg_1372 = ap_const_lv1_0))) then
                i_1_reg_1468 <= i_1_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_reg_1697 = ap_const_lv1_0))) then
                linebuf_V_load_reg_1711 <= linebuf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state24_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                loopNum_1_reg_1614 <= grp_checkMandelbrot_fu_491_ap_return;
                loopNum_2_reg_1620 <= grp_checkMandelbrot_fu_498_ap_return;
                loopNum_3_reg_1626 <= grp_checkMandelbrot_fu_505_ap_return;
                tmp_i_cast1_reg_1599 <= tmp_i_cast1_fu_1010_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mul4_reg_1437 <= grp_fu_632_p2;
                tmp_34_reg_1442 <= grp_fu_632_p2(192 downto 106);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_reg_1394 <= grp_fu_566_p2;
                p_Val2_s_reg_1376 <= grp_fu_546_p2;
                t_V_reg_1382 <= grp_fu_546_p2(185 downto 90);
                tmp_32_reg_1388 <= grp_fu_546_p2(185 downto 185);
                tmp_37_reg_1399 <= grp_fu_566_p2(192 downto 105);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_32_reg_1388 = ap_const_lv1_1))) then
                neg_mul5_reg_1447 <= neg_mul5_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_35_reg_1366 = ap_const_lv1_1))) then
                neg_mul_reg_1414 <= neg_mul_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_1_reg_1429 <= p_Val2_1_fu_715_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                p_Val2_2_reg_1579 <= p_Val2_2_fu_968_p2;
                p_Val2_4_reg_1584 <= p_Val2_4_fu_973_p2;
                p_Val2_6_reg_1589 <= p_Val2_6_fu_978_p2;
                p_Val2_8_reg_1594 <= p_Val2_8_fu_983_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                p_Val2_3_reg_1564 <= grp_fu_927_p2;
                p_Val2_5_reg_1569 <= grp_fu_942_p2;
                p_Val2_7_reg_1574 <= grp_fu_957_p2;
                p_Val2_s_16_reg_1559 <= grp_fu_912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_lshr_reg_1404 <= p_neg_fu_614_p2(95 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_neg_t_reg_1419 <= p_neg_t_fu_646_p2;
                stepY_V_reg_1424 <= stepY_V_fu_681_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                p_rec_reg_1716 <= p_rec_fu_1330_p2;
                y_V_1_reg_1721 <= y_V_1_fu_1336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                stepX_V_reg_1457 <= stepX_V_fu_767_p3;
                    tmp_4_cast_reg_1452(29 downto 0) <= tmp_4_cast_fu_735_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_11_fu_880_p2 = ap_const_lv1_0))) then
                tmp_13_reg_1552 <= tmp_13_fu_962_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_778_p2 = ap_const_lv1_0) and (tmp_5_reg_1372 = ap_const_lv1_0))) then
                    tmp_1_reg_1479(31 downto 0) <= tmp_1_fu_816_p1(31 downto 0);
                tmp_7_reg_1473 <= tmp_7_fu_806_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    tmp_3_reg_1489(31 downto 0) <= tmp_3_fu_830_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    tmp_9_reg_1499(31 downto 0) <= tmp_9_fu_844_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_i1_reg_1637 <= tmp_i1_fu_1066_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_i2_cast1_reg_1657 <= tmp_i2_cast1_fu_1155_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_i3_reg_1677 <= tmp_i3_fu_1211_p2;
            end if;
        end if;
    end process;
    tmp_4_cast_reg_1452(30) <= '0';
    tmp_1_reg_1479(63 downto 32) <= "00000000000000000000000000000000";
    tmp_3_reg_1489(63 downto 32) <= "00000000000000000000000000000000";
    tmp_9_reg_1499(63 downto 32) <= "00000000000000000000000000000000";
    gmem_addr_reg_1517(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state18, tmp_11_fu_880_p2, ap_enable_reg_pp0_iter2, ap_CS_fsm_state38, gmem_BVALID, tmp_5_reg_1372, ap_CS_fsm_state13, exitcond_fu_778_p2, ap_CS_fsm_state17, tmp_10_fu_849_p2, ap_block_state18_io, ap_CS_fsm_state24, ap_block_state24_on_subcall_done, exitcond1_fu_1313_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and ((exitcond_fu_778_p2 = ap_const_lv1_1) or (tmp_5_reg_1372 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_10_fu_849_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_11_fu_880_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_11_fu_880_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_boolean_0 = ap_block_state24_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_fu_1313_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_fu_1313_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(30);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(31);
    ap_CS_fsm_state38 <= ap_CS_fsm(35);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state33_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state33_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state33_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state33_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_state18_io_assign_proc : process(tmp_11_fu_880_p2, ap_sig_ioackin_gmem_AWREADY)
    begin
                ap_block_state18_io <= ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_0) and (tmp_11_fu_880_p2 = ap_const_lv1_1));
    end process;


    ap_block_state24_on_subcall_done_assign_proc : process(grp_checkMandelbrot_fu_484_ap_done, grp_checkMandelbrot_fu_491_ap_done, grp_checkMandelbrot_fu_498_ap_done, grp_checkMandelbrot_fu_505_ap_done)
    begin
                ap_block_state24_on_subcall_done <= ((grp_checkMandelbrot_fu_505_ap_done = ap_const_logic_0) or (grp_checkMandelbrot_fu_498_ap_done = ap_const_logic_0) or (grp_checkMandelbrot_fu_491_ap_done = ap_const_logic_0) or (grp_checkMandelbrot_fu_484_ap_done = ap_const_logic_0));
    end process;

        ap_block_state31_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_io_assign_proc : process(ap_reg_pp0_iter1_exitcond1_reg_1697, ap_sig_ioackin_gmem_WREADY)
    begin
                ap_block_state33_io <= ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_reg_pp0_iter1_exitcond1_reg_1697 = ap_const_lv1_0));
    end process;

        ap_block_state33_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state31_assign_proc : process(exitcond1_fu_1313_p2)
    begin
        if ((exitcond1_fu_1313_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state17, tmp_10_fu_849_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_10_fu_849_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, tmp_10_fu_849_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_10_fu_849_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    cntX_fu_886_p2 <= std_logic_vector(unsigned(cntX_0_i_reg_462) + unsigned(ap_const_lv8_1));
    cntY_1_fu_855_p2 <= std_logic_vector(unsigned(cntY_reg_451) + unsigned(ap_const_lv9_1));

    colorMap_address0_assign_proc : process(ap_CS_fsm_state13, tmp_1_fu_816_p1, tmp_3_fu_830_p1, ap_CS_fsm_state14, tmp_9_fu_844_p1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            colorMap_address0 <= tmp_9_fu_844_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            colorMap_address0 <= tmp_3_fu_830_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            colorMap_address0 <= tmp_1_fu_816_p1(9 - 1 downto 0);
        else 
            colorMap_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    colorMap_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            colorMap_ce0 <= ap_const_logic_1;
        else 
            colorMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_1313_p2 <= "1" when (indvar_reg_473 = ap_const_lv9_1E0) else "0";
    exitcond_fu_778_p2 <= "1" when (i_reg_418 = ap_const_lv8_80) else "0";

    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state18, tmp_11_fu_880_p2, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_11_fu_880_p2 = ap_const_lv1_1))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state38, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond1_reg_1697, ap_reg_ioackin_gmem_WREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_exitcond1_reg_1697 = ap_const_lv1_0))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state18, tmp_11_fu_880_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_11_fu_880_p2 = ap_const_lv1_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_reg_pp0_iter1_exitcond1_reg_1697)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_exitcond1_reg_1697 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_checkMandelbrot_fu_484_ap_start <= ap_reg_grp_checkMandelbrot_fu_484_ap_start;
    grp_checkMandelbrot_fu_491_ap_start <= ap_reg_grp_checkMandelbrot_fu_491_ap_start;
    grp_checkMandelbrot_fu_498_ap_start <= ap_reg_grp_checkMandelbrot_fu_498_ap_start;
    grp_checkMandelbrot_fu_505_ap_start <= ap_reg_grp_checkMandelbrot_fu_505_ap_start;
    grp_fu_546_p0 <= ap_const_lv187_lc_1(92 - 1 downto 0);
    grp_fu_566_p0 <= ap_const_lv193_lc_2(98 - 1 downto 0);
    grp_fu_632_p0 <= ap_const_lv193_lc_3(98 - 1 downto 0);

    grp_fu_912_ce_assign_proc : process(ap_CS_fsm_state18, ap_block_state18_io, ap_CS_fsm_state22, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_fu_912_ce <= ap_const_logic_1;
        else 
            grp_fu_912_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_912_p0 <= grp_fu_912_p00(10 - 1 downto 0);
    grp_fu_912_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_fu_896_p3),96));
    grp_fu_912_p1 <= stepX_V_reg_1457(89 - 1 downto 0);

    grp_fu_927_ce_assign_proc : process(ap_CS_fsm_state18, ap_block_state18_io, ap_CS_fsm_state22, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_fu_927_ce <= ap_const_logic_1;
        else 
            grp_fu_927_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_927_p0 <= grp_fu_927_p00(10 - 1 downto 0);
    grp_fu_927_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_1_fu_917_p2),96));
    grp_fu_927_p1 <= stepX_V_reg_1457(89 - 1 downto 0);

    grp_fu_942_ce_assign_proc : process(ap_CS_fsm_state18, ap_block_state18_io, ap_CS_fsm_state22, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_fu_942_ce <= ap_const_logic_1;
        else 
            grp_fu_942_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_942_p0 <= grp_fu_942_p00(10 - 1 downto 0);
    grp_fu_942_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_2_fu_932_p2),96));
    grp_fu_942_p1 <= stepX_V_reg_1457(89 - 1 downto 0);

    grp_fu_957_ce_assign_proc : process(ap_CS_fsm_state18, ap_block_state18_io, ap_CS_fsm_state22, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_boolean_0 = ap_block_state18_io) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            grp_fu_957_ce <= ap_const_logic_1;
        else 
            grp_fu_957_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_957_p0 <= grp_fu_957_p00(10 - 1 downto 0);
    grp_fu_957_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_3_fu_947_p2),96));
    grp_fu_957_p1 <= stepX_V_reg_1457(89 - 1 downto 0);
    i_1_fu_784_p2 <= std_logic_vector(unsigned(i_reg_418) + unsigned(ap_const_lv8_1));
    i_cast1_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_418),10));
    i_op_assign_1_fu_917_p2 <= (i_op_assign_fu_896_p3 or ap_const_lv10_1);
    i_op_assign_2_fu_932_p2 <= (i_op_assign_fu_896_p3 or ap_const_lv10_2);
    i_op_assign_3_fu_947_p2 <= (i_op_assign_fu_896_p3 or ap_const_lv10_3);
    i_op_assign_cast_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_fu_896_p3),11));
    i_op_assign_fu_896_p3 <= (cntX_0_i_reg_462 & ap_const_lv2_0);
    indvar_next_fu_1319_p2 <= std_logic_vector(unsigned(indvar_reg_473) + unsigned(ap_const_lv9_1));

    linebuf_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state30, tmp_14_fu_1117_p1, tmp_22_fu_1235_p1, tmp_29_fu_1295_p1, tmp_31_fu_1325_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            linebuf_V_address0 <= tmp_31_fu_1325_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            linebuf_V_address0 <= tmp_29_fu_1295_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            linebuf_V_address0 <= tmp_22_fu_1235_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            linebuf_V_address0 <= tmp_14_fu_1117_p1(9 - 1 downto 0);
        else 
            linebuf_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    linebuf_V_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            linebuf_V_ce0 <= ap_const_logic_1;
        else 
            linebuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_V_d0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, val_assign_fu_1122_p5, val_assign_1_fu_1240_p5, val_assign_2_fu_1300_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            linebuf_V_d0 <= val_assign_2_fu_1300_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            linebuf_V_d0 <= val_assign_1_fu_1240_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            linebuf_V_d0 <= val_assign_fu_1122_p5;
        else 
            linebuf_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    linebuf_V_we0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            linebuf_V_we0 <= ap_const_logic_1;
        else 
            linebuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    neg_mul5_fu_730_p2 <= std_logic_vector(unsigned(ap_const_lv193_lc_4) - unsigned(mul4_reg_1437));
    neg_mul_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv193_lc_4) - unsigned(mul_reg_1394));
    neg_ti1_fu_761_p2 <= std_logic_vector(unsigned(ap_const_lv96_0) - unsigned(tmp_18_fu_754_p3));
    neg_ti_fu_675_p2 <= std_logic_vector(unsigned(ap_const_lv96_0) - unsigned(tmp_23_fu_668_p3));
    p_0_rec_cast_cast_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_rec_reg_439),31));
    p_Val2_1_fu_715_p2 <= std_logic_vector(unsigned(centerX_V_read_reg_1341) - unsigned(tmp_6_fu_708_p3));
    p_Val2_2_fu_968_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_1429) + unsigned(p_Val2_s_16_reg_1559));
    p_Val2_4_fu_973_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_1429) + unsigned(p_Val2_3_reg_1564));
    p_Val2_6_fu_978_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_1429) + unsigned(p_Val2_5_reg_1569));
    p_Val2_8_fu_983_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_1429) + unsigned(p_Val2_7_reg_1574));
    p_lshr_f_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V2_fu_695_p4),96));
    p_neg_fu_614_p2 <= std_logic_vector(unsigned(ap_const_lv96_0) - unsigned(t_V_reg_1382));
    p_neg_t_fu_646_p2 <= std_logic_vector(unsigned(ap_const_lv96_0) - unsigned(tmp_15_fu_643_p1));
    p_rec_fu_1330_p2 <= std_logic_vector(unsigned(p_0_rec_reg_439) + unsigned(ap_const_lv18_1E0));
    p_shl_cast_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_794_p3),10));
    p_shl_fu_794_p3 <= (tmp_38_fu_790_p1 & ap_const_lv2_0);
    p_shl_i1_cast_cast_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1055_p3),10));
    p_shl_i2_cast_cast_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1138_p3),10));
    p_shl_i3_cast_cast_fu_1207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_1200_p3),10));
    p_shl_i_cast_cast_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_992_p3),10));

    s_colorMap_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, tmp_1_reg_1479, tmp_3_reg_1489, ap_CS_fsm_state14, tmp_9_reg_1499, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state16, tmp_45_i_fu_1018_p1, tmp_45_i1_fu_1076_p1, tmp_49_i1_fu_1109_p1, tmp_47_i2_fu_1178_p1, tmp_45_i3_fu_1221_p1, tmp_49_i3_fu_1281_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            s_colorMap_address0 <= tmp_49_i3_fu_1281_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            s_colorMap_address0 <= tmp_45_i3_fu_1221_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            s_colorMap_address0 <= tmp_47_i2_fu_1178_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_colorMap_address0 <= tmp_49_i1_fu_1109_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            s_colorMap_address0 <= tmp_45_i1_fu_1076_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            s_colorMap_address0 <= tmp_45_i_fu_1018_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            s_colorMap_address0 <= tmp_9_reg_1499(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_colorMap_address0 <= tmp_3_reg_1489(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_colorMap_address0 <= tmp_1_reg_1479(9 - 1 downto 0);
        else 
            s_colorMap_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    s_colorMap_address1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, tmp_47_i_fu_1033_p1, tmp_49_i_fu_1047_p1, tmp_47_i1_fu_1094_p1, tmp_45_i2_fu_1163_p1, tmp_49_i2_fu_1192_p1, tmp_47_i3_fu_1266_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            s_colorMap_address1 <= tmp_47_i3_fu_1266_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            s_colorMap_address1 <= tmp_49_i2_fu_1192_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            s_colorMap_address1 <= tmp_45_i2_fu_1163_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_colorMap_address1 <= tmp_47_i1_fu_1094_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            s_colorMap_address1 <= tmp_49_i_fu_1047_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            s_colorMap_address1 <= tmp_47_i_fu_1033_p1(9 - 1 downto 0);
        else 
            s_colorMap_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    s_colorMap_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_block_state24_on_subcall_done, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_boolean_0 = ap_block_state24_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            s_colorMap_ce0 <= ap_const_logic_1;
        else 
            s_colorMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_colorMap_ce1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state24, ap_block_state24_on_subcall_done, ap_CS_fsm_state26, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_boolean_0 = ap_block_state24_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            s_colorMap_ce1 <= ap_const_logic_1;
        else 
            s_colorMap_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_colorMap_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            s_colorMap_we0 <= ap_const_logic_1;
        else 
            s_colorMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stepX_V_fu_767_p3 <= 
        neg_ti1_fu_761_p2 when (tmp_32_reg_1388(0) = '1') else 
        tmp_17_fu_751_p1;
    stepY_V_fu_681_p3 <= 
        neg_ti_fu_675_p2 when (tmp_35_reg_1366(0) = '1') else 
        tmp_20_fu_665_p1;
    t_V2_fu_695_p4 <= p_Val2_s_reg_1376(185 downto 91);
    t_V_1_fu_536_p2 <= std_logic_vector(shift_left(unsigned(zoomHeight_V),to_integer(unsigned('0' & ap_const_lv96_1(31-1 downto 0)))));
    tmp_10_fu_849_p2 <= "1" when (cntY_reg_451 = ap_const_lv9_1E0) else "0";
    tmp_11_fu_880_p2 <= "1" when (cntX_0_i_reg_462 = ap_const_lv8_A0) else "0";
    tmp_12_cast1_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cntX_0_i_reg_462),11));
        tmp_13_cast_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_1552),32));

    tmp_13_fu_962_p2 <= std_logic_vector(unsigned(i_op_assign_cast_fu_904_p1) - unsigned(tmp_12_cast1_fu_892_p1));
    tmp_14_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_cast_fu_1114_p1),64));
    tmp_15_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_reg_1404),96));
        tmp_16_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_fu_738_p4),96));

        tmp_17_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_reg_1442),96));

    tmp_18_fu_754_p3 <= 
        tmp_16_fu_747_p1 when (tmp_32_reg_1388(0) = '1') else 
        tmp_17_fu_751_p1;
        tmp_19_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_fu_652_p4),96));

    tmp_1_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_fu_812_p1),64));
        tmp_20_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_reg_1399),96));

    tmp_21_fu_1226_p2 <= std_logic_vector(unsigned(tmp_13_reg_1552) + unsigned(ap_const_lv11_1));
    tmp_22_fu_1235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_cast_fu_1231_p1),64));
    tmp_23_fu_668_p3 <= 
        tmp_19_fu_661_p1 when (tmp_35_reg_1366(0) = '1') else 
        tmp_20_fu_665_p1;
        tmp_24_cast_fu_1231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_1226_p2),32));

    tmp_24_fu_688_p3 <= p_Val2_s_reg_1376(185 downto 185);
    tmp_25_fu_992_p3 <= (grp_checkMandelbrot_fu_484_ap_return & ap_const_lv2_0);
    tmp_26_fu_1055_p3 <= (loopNum_1_reg_1614 & ap_const_lv2_0);
    tmp_27_fu_1138_p3 <= (loopNum_2_reg_1620 & ap_const_lv2_0);
    tmp_28_fu_1286_p2 <= std_logic_vector(unsigned(tmp_13_reg_1552) + unsigned(ap_const_lv11_2));
    tmp_29_fu_1295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_cast_fu_1291_p1),64));
        tmp_2_cast_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_821_p2),32));

    tmp_2_fu_821_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(tmp_7_reg_1473));
    tmp_30_fu_1200_p3 <= (loopNum_3_reg_1626 & ap_const_lv2_0);
    tmp_31_fu_1325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_473),64));
    tmp_33_fu_738_p4 <= neg_mul5_reg_1447(192 downto 106);
        tmp_35_cast_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_1286_p2),32));

    tmp_36_fu_652_p4 <= neg_mul_reg_1414(192 downto 105);
    tmp_38_fu_790_p1 <= i_reg_418(7 - 1 downto 0);
    tmp_3_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_cast_fu_826_p1),64));
    tmp_45_i1_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_cast_fu_1072_p1),64));
    tmp_45_i2_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i2_cast_fu_1159_p1),64));
    tmp_45_i3_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i3_cast_fu_1217_p1),64));
    tmp_45_i_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_cast_fu_1014_p1),64));
        tmp_46_i1_cast_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_46_i1_fu_1084_p2),32));

    tmp_46_i1_fu_1084_p2 <= std_logic_vector(signed(tmp_i1_cast1_fu_1081_p1) + signed(ap_const_lv11_1));
        tmp_46_i2_cast_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_46_i2_fu_1168_p2),32));

    tmp_46_i2_fu_1168_p2 <= std_logic_vector(signed(tmp_i2_cast1_fu_1155_p1) + signed(ap_const_lv11_1));
        tmp_46_i3_cast_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_46_i3_fu_1256_p2),32));

    tmp_46_i3_fu_1256_p2 <= std_logic_vector(signed(tmp_i3_cast1_fu_1253_p1) + signed(ap_const_lv11_1));
        tmp_46_i_cast_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_46_i_fu_1023_p2),32));

    tmp_46_i_fu_1023_p2 <= std_logic_vector(signed(tmp_i_cast1_fu_1010_p1) + signed(ap_const_lv11_1));
    tmp_47_i1_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_i1_cast_fu_1090_p1),64));
    tmp_47_i2_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_i2_cast_fu_1174_p1),64));
    tmp_47_i3_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_i3_cast_fu_1262_p1),64));
    tmp_47_i_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_i_cast_fu_1029_p1),64));
        tmp_48_i1_cast_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_i1_fu_1099_p2),32));

    tmp_48_i1_fu_1099_p2 <= std_logic_vector(signed(tmp_i1_cast1_fu_1081_p1) + signed(ap_const_lv11_2));
        tmp_48_i2_cast_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_i2_fu_1183_p2),32));

    tmp_48_i2_fu_1183_p2 <= std_logic_vector(signed(tmp_i2_cast1_reg_1657) + signed(ap_const_lv11_2));
        tmp_48_i3_cast_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_i3_fu_1271_p2),32));

    tmp_48_i3_fu_1271_p2 <= std_logic_vector(signed(tmp_i3_cast1_fu_1253_p1) + signed(ap_const_lv11_2));
        tmp_48_i_cast_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_i_fu_1038_p2),32));

    tmp_48_i_fu_1038_p2 <= std_logic_vector(signed(tmp_i_cast1_reg_1599) + signed(ap_const_lv11_2));
    tmp_49_i1_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_i1_cast_fu_1105_p1),64));
    tmp_49_i2_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_i2_cast_fu_1188_p1),64));
    tmp_49_i3_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_i3_cast_fu_1277_p1),64));
    tmp_49_i_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_i_cast_fu_1043_p1),64));
    tmp_4_cast_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1346),31));
    tmp_4_fu_532_p1 <= zoomHeight_V(95 - 1 downto 0);
    tmp_5_fu_580_p2 <= "1" when (updateColorMap = ap_const_lv8_0) else "0";
    tmp_6_fu_708_p3 <= 
        p_neg_t_reg_1419 when (tmp_24_fu_688_p3(0) = '1') else 
        p_lshr_f_fu_704_p1;
        tmp_7_cast_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_806_p2),32));

    tmp_7_fu_806_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_802_p1) - unsigned(i_cast1_fu_774_p1));
        tmp_8_cast_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_835_p2),32));

    tmp_8_fu_835_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(tmp_7_reg_1473));
    tmp_9_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_cast_fu_840_p1),64));
        tmp_i1_cast1_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i1_reg_1637),11));

    tmp_i1_cast8_cast_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loopNum_1_reg_1614),10));
        tmp_i1_cast_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i1_fu_1066_p2),32));

    tmp_i1_fu_1066_p2 <= std_logic_vector(unsigned(p_shl_i1_cast_cast_fu_1062_p1) - unsigned(tmp_i1_cast8_cast_fu_1052_p1));
        tmp_i2_cast1_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i2_fu_1149_p2),11));

    tmp_i2_cast7_cast_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loopNum_2_reg_1620),10));
        tmp_i2_cast_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i2_fu_1149_p2),32));

    tmp_i2_fu_1149_p2 <= std_logic_vector(unsigned(p_shl_i2_cast_cast_fu_1145_p1) - unsigned(tmp_i2_cast7_cast_fu_1135_p1));
        tmp_i3_cast1_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i3_reg_1677),11));

    tmp_i3_cast6_cast_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loopNum_3_reg_1626),10));
        tmp_i3_cast_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i3_fu_1211_p2),32));

    tmp_i3_fu_1211_p2 <= std_logic_vector(unsigned(p_shl_i3_cast_cast_fu_1207_p1) - unsigned(tmp_i3_cast6_cast_fu_1197_p1));
        tmp_i_cast1_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_fu_1004_p2),11));

    tmp_i_cast9_cast_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_checkMandelbrot_fu_484_ap_return),10));
        tmp_i_cast_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_fu_1004_p2),32));

    tmp_i_fu_1004_p2 <= std_logic_vector(unsigned(p_shl_i_cast_cast_fu_1000_p1) - unsigned(tmp_i_cast9_cast_fu_988_p1));
        tmp_s_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_532_p1),96));

    val_assign_1_fu_1240_p5 <= (((s_colorMap_q0 & s_colorMap_q1) & reg_517) & reg_512);
    val_assign_2_fu_1300_p5 <= (((s_colorMap_q0 & s_colorMap_q1) & reg_517) & reg_512);
    val_assign_fu_1122_p5 <= (((s_colorMap_q0 & s_colorMap_q1) & reg_517) & reg_512);
    vram_V2_sum_cast_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vram_V2_sum_fu_865_p2),64));
    vram_V2_sum_fu_865_p2 <= std_logic_vector(unsigned(p_0_rec_cast_cast_fu_861_p1) + unsigned(tmp_4_cast_reg_1452));
    y_V_1_fu_1336_p2 <= std_logic_vector(unsigned(p_Val2_9_reg_429) - unsigned(stepY_V_reg_1424));
    y_V_fu_556_p2 <= std_logic_vector(signed(tmp_s_fu_552_p1) + signed(centerY_V));
end behav;
