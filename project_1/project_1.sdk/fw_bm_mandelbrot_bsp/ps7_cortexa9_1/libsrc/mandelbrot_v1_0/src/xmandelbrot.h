// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XMANDELBROT_H
#define XMANDELBROT_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xmandelbrot_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XMandelbrot_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XMandelbrot;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
} XMandelbrot_Centerx_v;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
} XMandelbrot_Centery_v;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
} XMandelbrot_Zoomheight_v;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XMandelbrot_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XMandelbrot_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XMandelbrot_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XMandelbrot_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XMandelbrot_Initialize(XMandelbrot *InstancePtr, u16 DeviceId);
XMandelbrot_Config* XMandelbrot_LookupConfig(u16 DeviceId);
int XMandelbrot_CfgInitialize(XMandelbrot *InstancePtr, XMandelbrot_Config *ConfigPtr);
#else
int XMandelbrot_Initialize(XMandelbrot *InstancePtr, const char* InstanceName);
int XMandelbrot_Release(XMandelbrot *InstancePtr);
#endif

void XMandelbrot_Start(XMandelbrot *InstancePtr);
u32 XMandelbrot_IsDone(XMandelbrot *InstancePtr);
u32 XMandelbrot_IsIdle(XMandelbrot *InstancePtr);
u32 XMandelbrot_IsReady(XMandelbrot *InstancePtr);
void XMandelbrot_EnableAutoRestart(XMandelbrot *InstancePtr);
void XMandelbrot_DisableAutoRestart(XMandelbrot *InstancePtr);

void XMandelbrot_Set_vram_V(XMandelbrot *InstancePtr, u32 Data);
u32 XMandelbrot_Get_vram_V(XMandelbrot *InstancePtr);
void XMandelbrot_Set_centerX_V(XMandelbrot *InstancePtr, XMandelbrot_Centerx_v Data);
XMandelbrot_Centerx_v XMandelbrot_Get_centerX_V(XMandelbrot *InstancePtr);
void XMandelbrot_Set_centerY_V(XMandelbrot *InstancePtr, XMandelbrot_Centery_v Data);
XMandelbrot_Centery_v XMandelbrot_Get_centerY_V(XMandelbrot *InstancePtr);
void XMandelbrot_Set_zoomHeight_V(XMandelbrot *InstancePtr, XMandelbrot_Zoomheight_v Data);
XMandelbrot_Zoomheight_v XMandelbrot_Get_zoomHeight_V(XMandelbrot *InstancePtr);
void XMandelbrot_Set_updateColorMap(XMandelbrot *InstancePtr, u32 Data);
u32 XMandelbrot_Get_updateColorMap(XMandelbrot *InstancePtr);
u32 XMandelbrot_Get_colorMap_BaseAddress(XMandelbrot *InstancePtr);
u32 XMandelbrot_Get_colorMap_HighAddress(XMandelbrot *InstancePtr);
u32 XMandelbrot_Get_colorMap_TotalBytes(XMandelbrot *InstancePtr);
u32 XMandelbrot_Get_colorMap_BitWidth(XMandelbrot *InstancePtr);
u32 XMandelbrot_Get_colorMap_Depth(XMandelbrot *InstancePtr);
u32 XMandelbrot_Write_colorMap_Words(XMandelbrot *InstancePtr, int offset, int *data, int length);
u32 XMandelbrot_Read_colorMap_Words(XMandelbrot *InstancePtr, int offset, int *data, int length);
u32 XMandelbrot_Write_colorMap_Bytes(XMandelbrot *InstancePtr, int offset, char *data, int length);
u32 XMandelbrot_Read_colorMap_Bytes(XMandelbrot *InstancePtr, int offset, char *data, int length);

void XMandelbrot_InterruptGlobalEnable(XMandelbrot *InstancePtr);
void XMandelbrot_InterruptGlobalDisable(XMandelbrot *InstancePtr);
void XMandelbrot_InterruptEnable(XMandelbrot *InstancePtr, u32 Mask);
void XMandelbrot_InterruptDisable(XMandelbrot *InstancePtr, u32 Mask);
void XMandelbrot_InterruptClear(XMandelbrot *InstancePtr, u32 Mask);
u32 XMandelbrot_InterruptGetEnabled(XMandelbrot *InstancePtr);
u32 XMandelbrot_InterruptGetStatus(XMandelbrot *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
