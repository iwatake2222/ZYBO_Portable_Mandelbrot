// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module checkMandelbrot (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        y_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [95:0] x_V;
input  [95:0] y_V;
output  [6:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [191:0] grp_fu_93_p2;
reg   [191:0] reg_110;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire   [193:0] tmp_49_cast3_fu_122_p1;
reg   [193:0] tmp_49_cast3_reg_270;
wire   [193:0] tmp_52_cast5_cast_fu_134_p1;
reg   [193:0] tmp_52_cast5_cast_reg_275;
wire   [0:0] tmp_fu_138_p2;
reg   [0:0] tmp_reg_280;
wire    ap_CS_fsm_state2;
wire   [6:0] loopNum_1_fu_144_p2;
reg   [6:0] loopNum_1_reg_284;
wire  signed [191:0] OP1_V_fu_150_p1;
reg  signed [191:0] OP1_V_reg_289;
wire  signed [191:0] OP1_V_1_fu_156_p1;
reg  signed [191:0] OP1_V_1_reg_295;
wire    ap_CS_fsm_state3;
reg   [191:0] p_Val2_2_reg_301;
wire    ap_CS_fsm_state7;
wire   [192:0] p_Val2_3_fu_169_p2;
reg   [192:0] p_Val2_3_reg_306;
reg   [95:0] zx_V_reg_311;
wire    ap_CS_fsm_state9;
reg   [95:0] zy_V_reg_319;
wire   [0:0] tmp_35_fu_220_p2;
reg   [0:0] tmp_35_reg_327;
wire    ap_CS_fsm_state10;
wire   [95:0] p_Val2_s_20_fu_225_p2;
reg   [95:0] p_Val2_s_20_reg_332;
wire   [0:0] tmp_36_fu_230_p2;
reg   [0:0] tmp_36_reg_337;
wire   [95:0] p_Val2_1_fu_235_p2;
reg   [95:0] p_Val2_1_reg_342;
reg   [95:0] orgZy_V_reg_58;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_39_fu_264_p2;
reg   [95:0] orgZx_V_reg_70;
reg   [6:0] loopNum_reg_81;
reg  signed [95:0] grp_fu_93_p0;
reg  signed [95:0] grp_fu_93_p1;
wire    ap_CS_fsm_state4;
wire   [185:0] tmp_32_fu_114_p3;
wire   [185:0] tmp_33_fu_126_p3;
wire   [192:0] tmp_1_fu_162_p1;
wire   [192:0] tmp_s_fu_166_p1;
wire   [193:0] tmp_34_fu_175_p1;
wire   [193:0] p_Val2_4_fu_178_p2;
wire   [192:0] p_Val2_5_fu_193_p3;
wire   [193:0] tmp_36_cast_fu_201_p1;
wire   [193:0] p_Val2_6_fu_205_p2;
wire   [95:0] zx_V_1_fu_240_p3;
wire   [95:0] zy_V_1_fu_245_p3;
wire  signed [96:0] tmp_38_fu_254_p1;
wire  signed [96:0] tmp_37_fu_250_p1;
wire   [96:0] r_V_1_fu_258_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

mandelbrot_mul_96bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 96 ),
    .dout_WIDTH( 192 ))
mandelbrot_mul_96bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_93_p0),
    .din1(grp_fu_93_p1),
    .ce(1'b1),
    .dout(grp_fu_93_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_39_fu_264_p2 == 1'd0) & (tmp_reg_280 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        loopNum_reg_81 <= loopNum_1_reg_284;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        loopNum_reg_81 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_39_fu_264_p2 == 1'd0) & (tmp_reg_280 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        orgZx_V_reg_70 <= zx_V_reg_311;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        orgZx_V_reg_70 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_39_fu_264_p2 == 1'd0) & (tmp_reg_280 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        orgZy_V_reg_58 <= zy_V_reg_319;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        orgZy_V_reg_58 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OP1_V_1_reg_295 <= OP1_V_1_fu_156_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        OP1_V_reg_289 <= OP1_V_fu_150_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        loopNum_1_reg_284 <= loopNum_1_fu_144_p2;
        tmp_reg_280 <= tmp_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_1_reg_342 <= p_Val2_1_fu_235_p2;
        p_Val2_s_20_reg_332 <= p_Val2_s_20_fu_225_p2;
        tmp_35_reg_327 <= tmp_35_fu_220_p2;
        tmp_36_reg_337 <= tmp_36_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_2_reg_301 <= grp_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_3_reg_306 <= p_Val2_3_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_110 <= grp_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_49_cast3_reg_270[185 : 90] <= tmp_49_cast3_fu_122_p1[185 : 90];
        tmp_52_cast5_cast_reg_275[185 : 90] <= tmp_52_cast5_cast_fu_134_p1[185 : 90];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        zx_V_reg_311 <= {{p_Val2_4_fu_178_p2[185:90]}};
        zy_V_reg_319 <= {{p_Val2_6_fu_205_p2[185:90]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state11) & ((tmp_reg_280 == 1'd1) | (tmp_39_fu_264_p2 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & ((tmp_reg_280 == 1'd1) | (tmp_39_fu_264_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_93_p0 = OP1_V_1_reg_295;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_93_p0 = OP1_V_1_fu_156_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_93_p0 = OP1_V_fu_150_p1;
    end else begin
        grp_fu_93_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_93_p1 = OP1_V_reg_289;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_93_p1 = OP1_V_1_fu_156_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_93_p1 = OP1_V_fu_150_p1;
    end else begin
        grp_fu_93_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & ((tmp_reg_280 == 1'd1) | (tmp_39_fu_264_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_fu_156_p1 = $signed(orgZy_V_reg_58);

assign OP1_V_fu_150_p1 = $signed(orgZx_V_reg_70);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = loopNum_reg_81;

assign loopNum_1_fu_144_p2 = (loopNum_reg_81 + 7'd1);

assign p_Val2_1_fu_235_p2 = (96'd0 - zy_V_reg_319);

assign p_Val2_3_fu_169_p2 = (tmp_1_fu_162_p1 - tmp_s_fu_166_p1);

assign p_Val2_4_fu_178_p2 = (tmp_49_cast3_reg_270 + tmp_34_fu_175_p1);

assign p_Val2_5_fu_193_p3 = {{reg_110}, {1'd0}};

assign p_Val2_6_fu_205_p2 = (tmp_52_cast5_cast_reg_275 + tmp_36_cast_fu_201_p1);

assign p_Val2_s_20_fu_225_p2 = (96'd0 - zx_V_reg_311);

assign r_V_1_fu_258_p2 = ($signed(tmp_38_fu_254_p1) + $signed(tmp_37_fu_250_p1));

assign tmp_1_fu_162_p1 = reg_110;

assign tmp_32_fu_114_p3 = {{x_V}, {90'd0}};

assign tmp_33_fu_126_p3 = {{y_V}, {90'd0}};

assign tmp_34_fu_175_p1 = p_Val2_3_reg_306;

assign tmp_35_fu_220_p2 = (($signed(zx_V_reg_311) > $signed(96'd0)) ? 1'b1 : 1'b0);

assign tmp_36_cast_fu_201_p1 = p_Val2_5_fu_193_p3;

assign tmp_36_fu_230_p2 = (($signed(zy_V_reg_319) > $signed(96'd0)) ? 1'b1 : 1'b0);

assign tmp_37_fu_250_p1 = $signed(zx_V_1_fu_240_p3);

assign tmp_38_fu_254_p1 = $signed(zy_V_1_fu_245_p3);

assign tmp_39_fu_264_p2 = (($signed(r_V_1_fu_258_p2) > $signed(97'd3713820117856140824697372672)) ? 1'b1 : 1'b0);

assign tmp_49_cast3_fu_122_p1 = tmp_32_fu_114_p3;

assign tmp_52_cast5_cast_fu_134_p1 = tmp_33_fu_126_p3;

assign tmp_fu_138_p2 = ((loopNum_reg_81 == 7'd127) ? 1'b1 : 1'b0);

assign tmp_s_fu_166_p1 = p_Val2_2_reg_301;

assign zx_V_1_fu_240_p3 = ((tmp_35_reg_327[0:0] === 1'b1) ? zx_V_reg_311 : p_Val2_s_20_reg_332);

assign zy_V_1_fu_245_p3 = ((tmp_36_reg_337[0:0] === 1'b1) ? zy_V_reg_319 : p_Val2_1_reg_342);

always @ (posedge ap_clk) begin
    tmp_49_cast3_reg_270[89:0] <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    tmp_49_cast3_reg_270[193:186] <= 8'b00000000;
    tmp_52_cast5_cast_reg_275[89:0] <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    tmp_52_cast5_cast_reg_275[193:186] <= 8'b00000000;
end

endmodule //checkMandelbrot
