// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mandelbrot,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=50922989,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=176,HLS_SYN_FF=16190,HLS_SYN_LUT=12839}" *)

module mandelbrot (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_pp0_stage0 = 36'd1073741824;
parameter    ap_ST_fsm_state34 = 36'd2147483648;
parameter    ap_ST_fsm_state35 = 36'd4294967296;
parameter    ap_ST_fsm_state36 = 36'd8589934592;
parameter    ap_ST_fsm_state37 = 36'd17179869184;
parameter    ap_ST_fsm_state38 = 36'd34359738368;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] vram_V;
wire   [95:0] centerX_V;
wire   [95:0] centerY_V;
wire   [95:0] zoomHeight_V;
wire   [7:0] updateColorMap;
reg   [8:0] colorMap_address0;
reg    colorMap_ce0;
wire   [7:0] colorMap_q0;
reg   [8:0] s_colorMap_address0;
reg    s_colorMap_ce0;
reg    s_colorMap_we0;
wire   [7:0] s_colorMap_q0;
reg   [8:0] s_colorMap_address1;
reg    s_colorMap_ce1;
wire   [7:0] s_colorMap_q1;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state18;
wire   [0:0] tmp_11_fu_880_p2;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_reg_1697;
reg   [0:0] ap_reg_pp0_iter1_exitcond1_reg_1697;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state38;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire    gmem_ARREADY;
wire    gmem_RVALID;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [8:0] indvar_reg_473;
reg   [7:0] reg_512;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
reg   [7:0] reg_517;
reg   [95:0] centerX_V_read_reg_1341;
reg   [29:0] tmp_reg_1346;
wire   [95:0] y_V_fu_556_p2;
reg   [95:0] y_V_reg_1356;
reg   [0:0] tmp_35_reg_1366;
wire   [0:0] tmp_5_fu_580_p2;
reg   [0:0] tmp_5_reg_1372;
wire   [186:0] grp_fu_546_p2;
reg   [186:0] p_Val2_s_reg_1376;
wire    ap_CS_fsm_state5;
reg  signed [95:0] t_V_reg_1382;
reg   [0:0] tmp_32_reg_1388;
wire   [192:0] grp_fu_566_p2;
reg   [192:0] mul_reg_1394;
reg   [87:0] tmp_37_reg_1399;
reg   [94:0] p_lshr_reg_1404;
wire    ap_CS_fsm_state6;
wire   [192:0] neg_mul_fu_638_p2;
reg   [192:0] neg_mul_reg_1414;
wire   [95:0] p_neg_t_fu_646_p2;
reg   [95:0] p_neg_t_reg_1419;
wire    ap_CS_fsm_state7;
wire   [95:0] stepY_V_fu_681_p3;
reg   [95:0] stepY_V_reg_1424;
wire   [95:0] p_Val2_1_fu_715_p2;
reg   [95:0] p_Val2_1_reg_1429;
wire    ap_CS_fsm_state8;
wire   [192:0] grp_fu_632_p2;
reg   [192:0] mul4_reg_1437;
wire    ap_CS_fsm_state10;
reg   [86:0] tmp_34_reg_1442;
wire   [192:0] neg_mul5_fu_730_p2;
reg   [192:0] neg_mul5_reg_1447;
wire    ap_CS_fsm_state11;
wire   [30:0] tmp_4_cast_fu_735_p1;
reg   [30:0] tmp_4_cast_reg_1452;
wire    ap_CS_fsm_state12;
wire  signed [95:0] stepX_V_fu_767_p3;
reg  signed [95:0] stepX_V_reg_1457;
wire   [7:0] i_1_fu_784_p2;
reg   [7:0] i_1_reg_1468;
wire    ap_CS_fsm_state13;
wire   [9:0] tmp_7_fu_806_p2;
reg   [9:0] tmp_7_reg_1473;
wire   [0:0] exitcond_fu_778_p2;
wire   [63:0] tmp_1_fu_816_p1;
reg   [63:0] tmp_1_reg_1479;
wire   [63:0] tmp_3_fu_830_p1;
reg   [63:0] tmp_3_reg_1489;
wire    ap_CS_fsm_state14;
wire   [63:0] tmp_9_fu_844_p1;
reg   [63:0] tmp_9_reg_1499;
wire    ap_CS_fsm_state15;
wire   [8:0] cntY_1_fu_855_p2;
reg   [8:0] cntY_1_reg_1512;
wire    ap_CS_fsm_state17;
reg   [31:0] gmem_addr_reg_1517;
wire   [0:0] tmp_10_fu_849_p2;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_block_state18_io;
wire   [7:0] cntX_fu_886_p2;
reg   [7:0] cntX_reg_1527;
wire   [10:0] tmp_13_fu_962_p2;
reg   [10:0] tmp_13_reg_1552;
wire   [95:0] grp_fu_912_p2;
reg   [95:0] p_Val2_s_16_reg_1559;
wire    ap_CS_fsm_state22;
wire   [95:0] grp_fu_927_p2;
reg   [95:0] p_Val2_3_reg_1564;
wire   [95:0] grp_fu_942_p2;
reg   [95:0] p_Val2_5_reg_1569;
wire   [95:0] grp_fu_957_p2;
reg   [95:0] p_Val2_7_reg_1574;
wire   [95:0] p_Val2_2_fu_968_p2;
reg   [95:0] p_Val2_2_reg_1579;
wire    ap_CS_fsm_state23;
wire   [95:0] p_Val2_4_fu_973_p2;
reg   [95:0] p_Val2_4_reg_1584;
wire   [95:0] p_Val2_6_fu_978_p2;
reg   [95:0] p_Val2_6_reg_1589;
wire   [95:0] p_Val2_8_fu_983_p2;
reg   [95:0] p_Val2_8_reg_1594;
wire  signed [10:0] tmp_i_cast1_fu_1010_p1;
reg  signed [10:0] tmp_i_cast1_reg_1599;
wire    ap_CS_fsm_state24;
wire    grp_checkMandelbrot_fu_484_ap_done;
wire    grp_checkMandelbrot_fu_491_ap_done;
wire    grp_checkMandelbrot_fu_498_ap_done;
wire    grp_checkMandelbrot_fu_505_ap_done;
reg    ap_block_state24_on_subcall_done;
wire   [6:0] grp_checkMandelbrot_fu_491_ap_return;
reg   [6:0] loopNum_1_reg_1614;
wire   [6:0] grp_checkMandelbrot_fu_498_ap_return;
reg   [6:0] loopNum_2_reg_1620;
wire   [6:0] grp_checkMandelbrot_fu_505_ap_return;
reg   [6:0] loopNum_3_reg_1626;
wire   [9:0] tmp_i1_fu_1066_p2;
reg   [9:0] tmp_i1_reg_1637;
wire    ap_CS_fsm_state26;
wire  signed [10:0] tmp_i2_cast1_fu_1155_p1;
reg  signed [10:0] tmp_i2_cast1_reg_1657;
wire    ap_CS_fsm_state28;
wire   [9:0] tmp_i3_fu_1211_p2;
reg   [9:0] tmp_i3_reg_1677;
wire   [0:0] exitcond1_fu_1313_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state31_pp0_stage0_iter0;
wire    ap_block_state32_pp0_stage0_iter1;
wire    ap_block_state33_pp0_stage0_iter2;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_block_state33_io;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] indvar_next_fu_1319_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] linebuf_V_q0;
reg   [31:0] linebuf_V_load_reg_1711;
reg    ap_enable_reg_pp0_iter1;
wire   [17:0] p_rec_fu_1330_p2;
reg   [17:0] p_rec_reg_1716;
wire    ap_CS_fsm_state34;
wire   [95:0] y_V_1_fu_1336_p2;
reg   [95:0] y_V_1_reg_1721;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state31;
reg   [8:0] linebuf_V_address0;
reg    linebuf_V_ce0;
reg    linebuf_V_we0;
reg   [31:0] linebuf_V_d0;
wire    grp_checkMandelbrot_fu_484_ap_start;
wire    grp_checkMandelbrot_fu_484_ap_idle;
wire    grp_checkMandelbrot_fu_484_ap_ready;
wire   [6:0] grp_checkMandelbrot_fu_484_ap_return;
wire    grp_checkMandelbrot_fu_491_ap_start;
wire    grp_checkMandelbrot_fu_491_ap_idle;
wire    grp_checkMandelbrot_fu_491_ap_ready;
wire    grp_checkMandelbrot_fu_498_ap_start;
wire    grp_checkMandelbrot_fu_498_ap_idle;
wire    grp_checkMandelbrot_fu_498_ap_ready;
wire    grp_checkMandelbrot_fu_505_ap_start;
wire    grp_checkMandelbrot_fu_505_ap_idle;
wire    grp_checkMandelbrot_fu_505_ap_ready;
reg   [7:0] i_reg_418;
wire    ap_CS_fsm_state16;
reg   [95:0] p_Val2_9_reg_429;
reg   [17:0] p_0_rec_reg_439;
reg   [8:0] cntY_reg_451;
reg   [7:0] cntX_0_i_reg_462;
wire    ap_CS_fsm_state30;
reg    ap_reg_grp_checkMandelbrot_fu_484_ap_start;
reg    ap_reg_grp_checkMandelbrot_fu_491_ap_start;
reg    ap_reg_grp_checkMandelbrot_fu_498_ap_start;
reg    ap_reg_grp_checkMandelbrot_fu_505_ap_start;
wire   [63:0] tmp_45_i_fu_1018_p1;
wire   [63:0] tmp_47_i_fu_1033_p1;
wire   [63:0] tmp_49_i_fu_1047_p1;
wire   [63:0] tmp_45_i1_fu_1076_p1;
wire   [63:0] tmp_47_i1_fu_1094_p1;
wire   [63:0] tmp_49_i1_fu_1109_p1;
wire   [63:0] tmp_14_fu_1117_p1;
wire   [63:0] tmp_45_i2_fu_1163_p1;
wire   [63:0] tmp_47_i2_fu_1178_p1;
wire   [63:0] tmp_49_i2_fu_1192_p1;
wire   [63:0] tmp_45_i3_fu_1221_p1;
wire   [63:0] tmp_22_fu_1235_p1;
wire   [63:0] tmp_47_i3_fu_1266_p1;
wire   [63:0] tmp_49_i3_fu_1281_p1;
wire   [63:0] tmp_29_fu_1295_p1;
wire   [63:0] tmp_31_fu_1325_p1;
wire   [63:0] vram_V2_sum_cast_fu_870_p1;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] val_assign_fu_1122_p5;
wire   [31:0] val_assign_1_fu_1240_p5;
wire   [31:0] val_assign_2_fu_1300_p5;
wire  signed [95:0] t_V_1_fu_536_p2;
wire   [91:0] grp_fu_546_p0;
wire   [94:0] tmp_4_fu_532_p1;
wire  signed [95:0] tmp_s_fu_552_p1;
wire   [97:0] grp_fu_566_p0;
wire   [95:0] p_neg_fu_614_p2;
wire   [97:0] grp_fu_632_p0;
wire   [95:0] tmp_15_fu_643_p1;
wire   [87:0] tmp_36_fu_652_p4;
wire  signed [95:0] tmp_19_fu_661_p1;
wire  signed [95:0] tmp_20_fu_665_p1;
wire   [95:0] tmp_23_fu_668_p3;
wire   [95:0] neg_ti_fu_675_p2;
wire   [94:0] t_V2_fu_695_p4;
wire   [0:0] tmp_24_fu_688_p3;
wire   [95:0] p_lshr_f_fu_704_p1;
wire   [95:0] tmp_6_fu_708_p3;
wire   [86:0] tmp_33_fu_738_p4;
wire  signed [95:0] tmp_16_fu_747_p1;
wire  signed [95:0] tmp_17_fu_751_p1;
wire   [95:0] tmp_18_fu_754_p3;
wire   [95:0] neg_ti1_fu_761_p2;
wire   [6:0] tmp_38_fu_790_p1;
wire   [8:0] p_shl_fu_794_p3;
wire   [9:0] p_shl_cast_fu_802_p1;
wire   [9:0] i_cast1_fu_774_p1;
wire  signed [31:0] tmp_7_cast_fu_812_p1;
wire   [9:0] tmp_2_fu_821_p2;
wire  signed [31:0] tmp_2_cast_fu_826_p1;
wire   [9:0] tmp_8_fu_835_p2;
wire  signed [31:0] tmp_8_cast_fu_840_p1;
wire   [30:0] p_0_rec_cast_cast_fu_861_p1;
wire   [30:0] vram_V2_sum_fu_865_p2;
wire   [9:0] i_op_assign_fu_896_p3;
wire   [9:0] grp_fu_912_p0;
wire  signed [88:0] grp_fu_912_p1;
wire   [9:0] i_op_assign_1_fu_917_p2;
wire   [9:0] grp_fu_927_p0;
wire  signed [88:0] grp_fu_927_p1;
wire   [9:0] i_op_assign_2_fu_932_p2;
wire   [9:0] grp_fu_942_p0;
wire  signed [88:0] grp_fu_942_p1;
wire   [9:0] i_op_assign_3_fu_947_p2;
wire   [9:0] grp_fu_957_p0;
wire  signed [88:0] grp_fu_957_p1;
wire   [10:0] i_op_assign_cast_fu_904_p1;
wire   [10:0] tmp_12_cast1_fu_892_p1;
wire   [8:0] tmp_25_fu_992_p3;
wire   [9:0] p_shl_i_cast_cast_fu_1000_p1;
wire   [9:0] tmp_i_cast9_cast_fu_988_p1;
wire   [9:0] tmp_i_fu_1004_p2;
wire  signed [31:0] tmp_i_cast_fu_1014_p1;
wire   [10:0] tmp_46_i_fu_1023_p2;
wire  signed [31:0] tmp_46_i_cast_fu_1029_p1;
wire   [10:0] tmp_48_i_fu_1038_p2;
wire  signed [31:0] tmp_48_i_cast_fu_1043_p1;
wire   [8:0] tmp_26_fu_1055_p3;
wire   [9:0] p_shl_i1_cast_cast_fu_1062_p1;
wire   [9:0] tmp_i1_cast8_cast_fu_1052_p1;
wire  signed [31:0] tmp_i1_cast_fu_1072_p1;
wire  signed [10:0] tmp_i1_cast1_fu_1081_p1;
wire   [10:0] tmp_46_i1_fu_1084_p2;
wire  signed [31:0] tmp_46_i1_cast_fu_1090_p1;
wire   [10:0] tmp_48_i1_fu_1099_p2;
wire  signed [31:0] tmp_48_i1_cast_fu_1105_p1;
wire  signed [31:0] tmp_13_cast_fu_1114_p1;
wire   [8:0] tmp_27_fu_1138_p3;
wire   [9:0] p_shl_i2_cast_cast_fu_1145_p1;
wire   [9:0] tmp_i2_cast7_cast_fu_1135_p1;
wire   [9:0] tmp_i2_fu_1149_p2;
wire  signed [31:0] tmp_i2_cast_fu_1159_p1;
wire   [10:0] tmp_46_i2_fu_1168_p2;
wire  signed [31:0] tmp_46_i2_cast_fu_1174_p1;
wire   [10:0] tmp_48_i2_fu_1183_p2;
wire  signed [31:0] tmp_48_i2_cast_fu_1188_p1;
wire   [8:0] tmp_30_fu_1200_p3;
wire   [9:0] p_shl_i3_cast_cast_fu_1207_p1;
wire   [9:0] tmp_i3_cast6_cast_fu_1197_p1;
wire  signed [31:0] tmp_i3_cast_fu_1217_p1;
wire   [10:0] tmp_21_fu_1226_p2;
wire  signed [31:0] tmp_24_cast_fu_1231_p1;
wire  signed [10:0] tmp_i3_cast1_fu_1253_p1;
wire   [10:0] tmp_46_i3_fu_1256_p2;
wire  signed [31:0] tmp_46_i3_cast_fu_1262_p1;
wire   [10:0] tmp_48_i3_fu_1271_p2;
wire  signed [31:0] tmp_48_i3_cast_fu_1277_p1;
wire   [10:0] tmp_28_fu_1286_p2;
wire  signed [31:0] tmp_35_cast_fu_1291_p1;
reg    grp_fu_912_ce;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg    grp_fu_927_ce;
reg    grp_fu_942_ce;
reg    grp_fu_957_ce;
reg   [35:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [95:0] grp_fu_912_p00;
wire   [95:0] grp_fu_927_p00;
wire   [95:0] grp_fu_942_p00;
wire   [95:0] grp_fu_957_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_grp_checkMandelbrot_fu_484_ap_start = 1'b0;
#0 ap_reg_grp_checkMandelbrot_fu_491_ap_start = 1'b0;
#0 ap_reg_grp_checkMandelbrot_fu_498_ap_start = 1'b0;
#0 ap_reg_grp_checkMandelbrot_fu_505_ap_start = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

mandelbrot_s_colocud #(
    .DataWidth( 8 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
s_colorMap_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(s_colorMap_address0),
    .ce0(s_colorMap_ce0),
    .we0(s_colorMap_we0),
    .d0(colorMap_q0),
    .q0(s_colorMap_q0),
    .address1(s_colorMap_address1),
    .ce1(s_colorMap_ce1),
    .q1(s_colorMap_q1)
);

mandelbrot_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
mandelbrot_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .vram_V(vram_V),
    .centerX_V(centerX_V),
    .centerY_V(centerY_V),
    .zoomHeight_V(zoomHeight_V),
    .updateColorMap(updateColorMap),
    .colorMap_address0(colorMap_address0),
    .colorMap_ce0(colorMap_ce0),
    .colorMap_q0(colorMap_q0)
);

mandelbrot_gmem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
mandelbrot_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_1517),
    .I_AWID(1'd0),
    .I_AWLEN(32'd480),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(linebuf_V_load_reg_1711),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

mandelbrot_linebudEe #(
    .DataWidth( 32 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
linebuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_V_address0),
    .ce0(linebuf_V_ce0),
    .we0(linebuf_V_we0),
    .d0(linebuf_V_d0),
    .q0(linebuf_V_q0)
);

checkMandelbrot grp_checkMandelbrot_fu_484(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_checkMandelbrot_fu_484_ap_start),
    .ap_done(grp_checkMandelbrot_fu_484_ap_done),
    .ap_idle(grp_checkMandelbrot_fu_484_ap_idle),
    .ap_ready(grp_checkMandelbrot_fu_484_ap_ready),
    .x_V(p_Val2_2_reg_1579),
    .y_V(p_Val2_9_reg_429),
    .ap_return(grp_checkMandelbrot_fu_484_ap_return)
);

checkMandelbrot grp_checkMandelbrot_fu_491(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_checkMandelbrot_fu_491_ap_start),
    .ap_done(grp_checkMandelbrot_fu_491_ap_done),
    .ap_idle(grp_checkMandelbrot_fu_491_ap_idle),
    .ap_ready(grp_checkMandelbrot_fu_491_ap_ready),
    .x_V(p_Val2_4_reg_1584),
    .y_V(p_Val2_9_reg_429),
    .ap_return(grp_checkMandelbrot_fu_491_ap_return)
);

checkMandelbrot grp_checkMandelbrot_fu_498(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_checkMandelbrot_fu_498_ap_start),
    .ap_done(grp_checkMandelbrot_fu_498_ap_done),
    .ap_idle(grp_checkMandelbrot_fu_498_ap_idle),
    .ap_ready(grp_checkMandelbrot_fu_498_ap_ready),
    .x_V(p_Val2_6_reg_1589),
    .y_V(p_Val2_9_reg_429),
    .ap_return(grp_checkMandelbrot_fu_498_ap_return)
);

checkMandelbrot grp_checkMandelbrot_fu_505(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_checkMandelbrot_fu_505_ap_start),
    .ap_done(grp_checkMandelbrot_fu_505_ap_done),
    .ap_idle(grp_checkMandelbrot_fu_505_ap_idle),
    .ap_ready(grp_checkMandelbrot_fu_505_ap_ready),
    .x_V(p_Val2_8_reg_1594),
    .y_V(p_Val2_9_reg_429),
    .ap_return(grp_checkMandelbrot_fu_505_ap_return)
);

mandelbrot_mul_92eOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 92 ),
    .din1_WIDTH( 96 ),
    .dout_WIDTH( 187 ))
mandelbrot_mul_92eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_546_p0),
    .din1(t_V_1_fu_536_p2),
    .ce(1'b1),
    .dout(grp_fu_546_p2)
);

mandelbrot_mul_98fYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 98 ),
    .din1_WIDTH( 96 ),
    .dout_WIDTH( 193 ))
mandelbrot_mul_98fYi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_566_p0),
    .din1(t_V_1_fu_536_p2),
    .ce(1'b1),
    .dout(grp_fu_566_p2)
);

mandelbrot_mul_98fYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 98 ),
    .din1_WIDTH( 96 ),
    .dout_WIDTH( 193 ))
mandelbrot_mul_98fYi_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_632_p0),
    .din1(t_V_reg_1382),
    .ce(1'b1),
    .dout(grp_fu_632_p2)
);

mandelbrot_mul_10g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 89 ),
    .dout_WIDTH( 96 ))
mandelbrot_mul_10g8j_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_912_p0),
    .din1(grp_fu_912_p1),
    .ce(grp_fu_912_ce),
    .dout(grp_fu_912_p2)
);

mandelbrot_mul_10g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 89 ),
    .dout_WIDTH( 96 ))
mandelbrot_mul_10g8j_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_927_p0),
    .din1(grp_fu_927_p1),
    .ce(grp_fu_927_ce),
    .dout(grp_fu_927_p2)
);

mandelbrot_mul_10g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 89 ),
    .dout_WIDTH( 96 ))
mandelbrot_mul_10g8j_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_942_p0),
    .din1(grp_fu_942_p1),
    .ce(grp_fu_942_ce),
    .dout(grp_fu_942_p2)
);

mandelbrot_mul_10g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 89 ),
    .dout_WIDTH( 96 ))
mandelbrot_mul_10g8j_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_957_p0),
    .din1(grp_fu_957_p1),
    .ce(grp_fu_957_ce),
    .dout(grp_fu_957_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state31) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (tmp_11_fu_880_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state31)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state31);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (tmp_11_fu_880_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_checkMandelbrot_fu_484_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_reg_grp_checkMandelbrot_fu_484_ap_start <= 1'b1;
        end else if ((grp_checkMandelbrot_fu_484_ap_ready == 1'b1)) begin
            ap_reg_grp_checkMandelbrot_fu_484_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_checkMandelbrot_fu_491_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_reg_grp_checkMandelbrot_fu_491_ap_start <= 1'b1;
        end else if ((grp_checkMandelbrot_fu_491_ap_ready == 1'b1)) begin
            ap_reg_grp_checkMandelbrot_fu_491_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_checkMandelbrot_fu_498_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_reg_grp_checkMandelbrot_fu_498_ap_start <= 1'b1;
        end else if ((grp_checkMandelbrot_fu_498_ap_ready == 1'b1)) begin
            ap_reg_grp_checkMandelbrot_fu_498_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_checkMandelbrot_fu_505_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_reg_grp_checkMandelbrot_fu_505_ap_start <= 1'b1;
        end else if ((grp_checkMandelbrot_fu_505_ap_ready == 1'b1)) begin
            ap_reg_grp_checkMandelbrot_fu_505_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state18) & (tmp_11_fu_880_p2 == 1'd1))) begin
            if ((1'b0 == ap_block_state18_io)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond1_reg_1697 == 1'd0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (gmem_WREADY == 1'b1))) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (tmp_10_fu_849_p2 == 1'd0))) begin
        cntX_0_i_reg_462 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        cntX_0_i_reg_462 <= cntX_reg_1527;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        cntY_reg_451 <= cntY_1_reg_1512;
    end else if (((1'b1 == ap_CS_fsm_state13) & ((exitcond_fu_778_p2 == 1'd1) | (tmp_5_reg_1372 == 1'd1)))) begin
        cntY_reg_451 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_5_reg_1372 == 1'd0))) begin
        i_reg_418 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_reg_418 <= i_1_reg_1468;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (tmp_11_fu_880_p2 == 1'd1))) begin
        indvar_reg_473 <= 9'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_fu_1313_p2 == 1'd0))) begin
        indvar_reg_473 <= indvar_next_fu_1319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        p_0_rec_reg_439 <= p_rec_reg_1716;
    end else if (((1'b1 == ap_CS_fsm_state13) & ((exitcond_fu_778_p2 == 1'd1) | (tmp_5_reg_1372 == 1'd1)))) begin
        p_0_rec_reg_439 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        p_Val2_9_reg_429 <= y_V_1_reg_1721;
    end else if (((1'b1 == ap_CS_fsm_state13) & ((exitcond_fu_778_p2 == 1'd1) | (tmp_5_reg_1372 == 1'd1)))) begin
        p_Val2_9_reg_429 <= y_V_reg_1356;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_512 <= s_colorMap_q1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        reg_512 <= s_colorMap_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_517 <= s_colorMap_q0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        reg_517 <= s_colorMap_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond1_reg_1697 <= exitcond1_reg_1697;
        exitcond1_reg_1697 <= exitcond1_fu_1313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        centerX_V_read_reg_1341 <= centerX_V;
        tmp_35_reg_1366 <= zoomHeight_V[32'd94];
        tmp_5_reg_1372 <= tmp_5_fu_580_p2;
        tmp_reg_1346 <= {{vram_V[31:2]}};
        y_V_reg_1356 <= y_V_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18))) begin
        cntX_reg_1527 <= cntX_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        cntY_1_reg_1512 <= cntY_1_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (tmp_10_fu_849_p2 == 1'd0))) begin
        gmem_addr_reg_1517[30 : 0] <= vram_V2_sum_cast_fu_870_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_5_reg_1372 == 1'd0))) begin
        i_1_reg_1468 <= i_1_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1697 == 1'd0))) begin
        linebuf_V_load_reg_1711 <= linebuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state24_on_subcall_done) & (1'b1 == ap_CS_fsm_state24))) begin
        loopNum_1_reg_1614 <= grp_checkMandelbrot_fu_491_ap_return;
        loopNum_2_reg_1620 <= grp_checkMandelbrot_fu_498_ap_return;
        loopNum_3_reg_1626 <= grp_checkMandelbrot_fu_505_ap_return;
        tmp_i_cast1_reg_1599 <= tmp_i_cast1_fu_1010_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul4_reg_1437 <= grp_fu_632_p2;
        tmp_34_reg_1442 <= {{grp_fu_632_p2[192:106]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_reg_1394 <= grp_fu_566_p2;
        p_Val2_s_reg_1376 <= grp_fu_546_p2;
        t_V_reg_1382 <= {{grp_fu_546_p2[185:90]}};
        tmp_32_reg_1388 <= grp_fu_546_p2[32'd185];
        tmp_37_reg_1399 <= {{grp_fu_566_p2[192:105]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_32_reg_1388 == 1'd1))) begin
        neg_mul5_reg_1447 <= neg_mul5_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_35_reg_1366 == 1'd1))) begin
        neg_mul_reg_1414 <= neg_mul_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_1_reg_1429 <= p_Val2_1_fu_715_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        p_Val2_2_reg_1579 <= p_Val2_2_fu_968_p2;
        p_Val2_4_reg_1584 <= p_Val2_4_fu_973_p2;
        p_Val2_6_reg_1589 <= p_Val2_6_fu_978_p2;
        p_Val2_8_reg_1594 <= p_Val2_8_fu_983_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_Val2_3_reg_1564 <= grp_fu_927_p2;
        p_Val2_5_reg_1569 <= grp_fu_942_p2;
        p_Val2_7_reg_1574 <= grp_fu_957_p2;
        p_Val2_s_16_reg_1559 <= grp_fu_912_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_lshr_reg_1404 <= {{p_neg_fu_614_p2[95:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_neg_t_reg_1419 <= p_neg_t_fu_646_p2;
        stepY_V_reg_1424 <= stepY_V_fu_681_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        p_rec_reg_1716 <= p_rec_fu_1330_p2;
        y_V_1_reg_1721 <= y_V_1_fu_1336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        stepX_V_reg_1457 <= stepX_V_fu_767_p3;
        tmp_4_cast_reg_1452[29 : 0] <= tmp_4_cast_fu_735_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (tmp_11_fu_880_p2 == 1'd0))) begin
        tmp_13_reg_1552 <= tmp_13_fu_962_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_778_p2 == 1'd0) & (tmp_5_reg_1372 == 1'd0))) begin
        tmp_1_reg_1479[31 : 0] <= tmp_1_fu_816_p1[31 : 0];
        tmp_7_reg_1473 <= tmp_7_fu_806_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_3_reg_1489[31 : 0] <= tmp_3_fu_830_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_9_reg_1499[31 : 0] <= tmp_9_fu_844_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_i1_reg_1637 <= tmp_i1_fu_1066_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_i2_cast1_reg_1657 <= tmp_i2_cast1_fu_1155_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_i3_reg_1677 <= tmp_i3_fu_1211_p2;
    end
end

always @ (*) begin
    if ((exitcond1_fu_1313_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state31 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state31 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (tmp_10_fu_849_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (tmp_10_fu_849_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        colorMap_address0 = tmp_9_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        colorMap_address0 = tmp_3_fu_830_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        colorMap_address0 = tmp_1_fu_816_p1;
    end else begin
        colorMap_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        colorMap_ce0 = 1'b1;
    end else begin
        colorMap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state18) & (tmp_11_fu_880_p2 == 1'd1))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond1_reg_1697 == 1'd0))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (tmp_11_fu_880_p2 == 1'd1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond1_reg_1697 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18)))) begin
        grp_fu_912_ce = 1'b1;
    end else begin
        grp_fu_912_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18)))) begin
        grp_fu_927_ce = 1'b1;
    end else begin
        grp_fu_927_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18)))) begin
        grp_fu_942_ce = 1'b1;
    end else begin
        grp_fu_942_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | ((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18)))) begin
        grp_fu_957_ce = 1'b1;
    end else begin
        grp_fu_957_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        linebuf_V_address0 = tmp_31_fu_1325_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        linebuf_V_address0 = tmp_29_fu_1295_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        linebuf_V_address0 = tmp_22_fu_1235_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        linebuf_V_address0 = tmp_14_fu_1117_p1;
    end else begin
        linebuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        linebuf_V_ce0 = 1'b1;
    end else begin
        linebuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        linebuf_V_d0 = val_assign_2_fu_1300_p5;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        linebuf_V_d0 = val_assign_1_fu_1240_p5;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        linebuf_V_d0 = val_assign_fu_1122_p5;
    end else begin
        linebuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26))) begin
        linebuf_V_we0 = 1'b1;
    end else begin
        linebuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        s_colorMap_address0 = tmp_49_i3_fu_1281_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        s_colorMap_address0 = tmp_45_i3_fu_1221_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        s_colorMap_address0 = tmp_47_i2_fu_1178_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        s_colorMap_address0 = tmp_49_i1_fu_1109_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        s_colorMap_address0 = tmp_45_i1_fu_1076_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        s_colorMap_address0 = tmp_45_i_fu_1018_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        s_colorMap_address0 = tmp_9_reg_1499;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        s_colorMap_address0 = tmp_3_reg_1489;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s_colorMap_address0 = tmp_1_reg_1479;
    end else begin
        s_colorMap_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        s_colorMap_address1 = tmp_47_i3_fu_1266_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        s_colorMap_address1 = tmp_49_i2_fu_1192_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        s_colorMap_address1 = tmp_45_i2_fu_1163_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        s_colorMap_address1 = tmp_47_i1_fu_1094_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        s_colorMap_address1 = tmp_49_i_fu_1047_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        s_colorMap_address1 = tmp_47_i_fu_1033_p1;
    end else begin
        s_colorMap_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | ((1'b0 == ap_block_state24_on_subcall_done) & (1'b1 == ap_CS_fsm_state24)))) begin
        s_colorMap_ce0 = 1'b1;
    end else begin
        s_colorMap_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | ((1'b0 == ap_block_state24_on_subcall_done) & (1'b1 == ap_CS_fsm_state24)))) begin
        s_colorMap_ce1 = 1'b1;
    end else begin
        s_colorMap_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        s_colorMap_we0 = 1'b1;
    end else begin
        s_colorMap_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & ((exitcond_fu_778_p2 == 1'd1) | (tmp_5_reg_1372 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (tmp_10_fu_849_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (tmp_11_fu_880_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_state18_io) & (1'b1 == ap_CS_fsm_state18) & (tmp_11_fu_880_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b0 == ap_block_state24_on_subcall_done) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_1313_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_1313_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state33_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state33_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state18_io = ((ap_sig_ioackin_gmem_AWREADY == 1'b0) & (tmp_11_fu_880_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state24_on_subcall_done = ((grp_checkMandelbrot_fu_505_ap_done == 1'b0) | (grp_checkMandelbrot_fu_498_ap_done == 1'b0) | (grp_checkMandelbrot_fu_491_ap_done == 1'b0) | (grp_checkMandelbrot_fu_484_ap_done == 1'b0));
end

assign ap_block_state31_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_io = ((ap_sig_ioackin_gmem_WREADY == 1'b0) & (ap_reg_pp0_iter1_exitcond1_reg_1697 == 1'd0));
end

assign ap_block_state33_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cntX_fu_886_p2 = (cntX_0_i_reg_462 + 8'd1);

assign cntY_1_fu_855_p2 = (cntY_reg_451 + 9'd1);

assign exitcond1_fu_1313_p2 = ((indvar_reg_473 == 9'd480) ? 1'b1 : 1'b0);

assign exitcond_fu_778_p2 = ((i_reg_418 == 8'd128) ? 1'b1 : 1'b0);

assign grp_checkMandelbrot_fu_484_ap_start = ap_reg_grp_checkMandelbrot_fu_484_ap_start;

assign grp_checkMandelbrot_fu_491_ap_start = ap_reg_grp_checkMandelbrot_fu_491_ap_start;

assign grp_checkMandelbrot_fu_498_ap_start = ap_reg_grp_checkMandelbrot_fu_498_ap_start;

assign grp_checkMandelbrot_fu_505_ap_start = ap_reg_grp_checkMandelbrot_fu_505_ap_start;

assign grp_fu_546_p0 = 187'd1650586768238491229757636608;

assign grp_fu_566_p0 = 193'd84510040015215293433113547026;

assign grp_fu_632_p0 = 193'd126765060022822940149670320538;

assign grp_fu_912_p0 = grp_fu_912_p00;

assign grp_fu_912_p00 = i_op_assign_fu_896_p3;

assign grp_fu_912_p1 = stepX_V_reg_1457;

assign grp_fu_927_p0 = grp_fu_927_p00;

assign grp_fu_927_p00 = i_op_assign_1_fu_917_p2;

assign grp_fu_927_p1 = stepX_V_reg_1457;

assign grp_fu_942_p0 = grp_fu_942_p00;

assign grp_fu_942_p00 = i_op_assign_2_fu_932_p2;

assign grp_fu_942_p1 = stepX_V_reg_1457;

assign grp_fu_957_p0 = grp_fu_957_p00;

assign grp_fu_957_p00 = i_op_assign_3_fu_947_p2;

assign grp_fu_957_p1 = stepX_V_reg_1457;

assign i_1_fu_784_p2 = (i_reg_418 + 8'd1);

assign i_cast1_fu_774_p1 = i_reg_418;

assign i_op_assign_1_fu_917_p2 = (i_op_assign_fu_896_p3 | 10'd1);

assign i_op_assign_2_fu_932_p2 = (i_op_assign_fu_896_p3 | 10'd2);

assign i_op_assign_3_fu_947_p2 = (i_op_assign_fu_896_p3 | 10'd3);

assign i_op_assign_cast_fu_904_p1 = i_op_assign_fu_896_p3;

assign i_op_assign_fu_896_p3 = {{cntX_0_i_reg_462}, {2'd0}};

assign indvar_next_fu_1319_p2 = (indvar_reg_473 + 9'd1);

assign neg_mul5_fu_730_p2 = (193'd0 - mul4_reg_1437);

assign neg_mul_fu_638_p2 = (193'd0 - mul_reg_1394);

assign neg_ti1_fu_761_p2 = (96'd0 - tmp_18_fu_754_p3);

assign neg_ti_fu_675_p2 = (96'd0 - tmp_23_fu_668_p3);

assign p_0_rec_cast_cast_fu_861_p1 = p_0_rec_reg_439;

assign p_Val2_1_fu_715_p2 = (centerX_V_read_reg_1341 - tmp_6_fu_708_p3);

assign p_Val2_2_fu_968_p2 = (p_Val2_1_reg_1429 + p_Val2_s_16_reg_1559);

assign p_Val2_4_fu_973_p2 = (p_Val2_1_reg_1429 + p_Val2_3_reg_1564);

assign p_Val2_6_fu_978_p2 = (p_Val2_1_reg_1429 + p_Val2_5_reg_1569);

assign p_Val2_8_fu_983_p2 = (p_Val2_1_reg_1429 + p_Val2_7_reg_1574);

assign p_lshr_f_fu_704_p1 = t_V2_fu_695_p4;

assign p_neg_fu_614_p2 = ($signed(96'd0) - $signed(t_V_reg_1382));

assign p_neg_t_fu_646_p2 = (96'd0 - tmp_15_fu_643_p1);

assign p_rec_fu_1330_p2 = (p_0_rec_reg_439 + 18'd480);

assign p_shl_cast_fu_802_p1 = p_shl_fu_794_p3;

assign p_shl_fu_794_p3 = {{tmp_38_fu_790_p1}, {2'd0}};

assign p_shl_i1_cast_cast_fu_1062_p1 = tmp_26_fu_1055_p3;

assign p_shl_i2_cast_cast_fu_1145_p1 = tmp_27_fu_1138_p3;

assign p_shl_i3_cast_cast_fu_1207_p1 = tmp_30_fu_1200_p3;

assign p_shl_i_cast_cast_fu_1000_p1 = tmp_25_fu_992_p3;

assign stepX_V_fu_767_p3 = ((tmp_32_reg_1388[0:0] === 1'b1) ? neg_ti1_fu_761_p2 : tmp_17_fu_751_p1);

assign stepY_V_fu_681_p3 = ((tmp_35_reg_1366[0:0] === 1'b1) ? neg_ti_fu_675_p2 : tmp_20_fu_665_p1);

assign t_V2_fu_695_p4 = {{p_Val2_s_reg_1376[185:91]}};

assign t_V_1_fu_536_p2 = zoomHeight_V << 96'd1;

assign tmp_10_fu_849_p2 = ((cntY_reg_451 == 9'd480) ? 1'b1 : 1'b0);

assign tmp_11_fu_880_p2 = ((cntX_0_i_reg_462 == 8'd160) ? 1'b1 : 1'b0);

assign tmp_12_cast1_fu_892_p1 = cntX_0_i_reg_462;

assign tmp_13_cast_fu_1114_p1 = $signed(tmp_13_reg_1552);

assign tmp_13_fu_962_p2 = (i_op_assign_cast_fu_904_p1 - tmp_12_cast1_fu_892_p1);

assign tmp_14_fu_1117_p1 = $unsigned(tmp_13_cast_fu_1114_p1);

assign tmp_15_fu_643_p1 = p_lshr_reg_1404;

assign tmp_16_fu_747_p1 = $signed(tmp_33_fu_738_p4);

assign tmp_17_fu_751_p1 = $signed(tmp_34_reg_1442);

assign tmp_18_fu_754_p3 = ((tmp_32_reg_1388[0:0] === 1'b1) ? tmp_16_fu_747_p1 : tmp_17_fu_751_p1);

assign tmp_19_fu_661_p1 = $signed(tmp_36_fu_652_p4);

assign tmp_1_fu_816_p1 = $unsigned(tmp_7_cast_fu_812_p1);

assign tmp_20_fu_665_p1 = $signed(tmp_37_reg_1399);

assign tmp_21_fu_1226_p2 = (tmp_13_reg_1552 + 11'd1);

assign tmp_22_fu_1235_p1 = $unsigned(tmp_24_cast_fu_1231_p1);

assign tmp_23_fu_668_p3 = ((tmp_35_reg_1366[0:0] === 1'b1) ? tmp_19_fu_661_p1 : tmp_20_fu_665_p1);

assign tmp_24_cast_fu_1231_p1 = $signed(tmp_21_fu_1226_p2);

assign tmp_24_fu_688_p3 = p_Val2_s_reg_1376[32'd185];

assign tmp_25_fu_992_p3 = {{grp_checkMandelbrot_fu_484_ap_return}, {2'd0}};

assign tmp_26_fu_1055_p3 = {{loopNum_1_reg_1614}, {2'd0}};

assign tmp_27_fu_1138_p3 = {{loopNum_2_reg_1620}, {2'd0}};

assign tmp_28_fu_1286_p2 = (tmp_13_reg_1552 + 11'd2);

assign tmp_29_fu_1295_p1 = $unsigned(tmp_35_cast_fu_1291_p1);

assign tmp_2_cast_fu_826_p1 = $signed(tmp_2_fu_821_p2);

assign tmp_2_fu_821_p2 = (10'd1 + tmp_7_reg_1473);

assign tmp_30_fu_1200_p3 = {{loopNum_3_reg_1626}, {2'd0}};

assign tmp_31_fu_1325_p1 = indvar_reg_473;

assign tmp_33_fu_738_p4 = {{neg_mul5_reg_1447[192:106]}};

assign tmp_35_cast_fu_1291_p1 = $signed(tmp_28_fu_1286_p2);

assign tmp_36_fu_652_p4 = {{neg_mul_reg_1414[192:105]}};

assign tmp_38_fu_790_p1 = i_reg_418[6:0];

assign tmp_3_fu_830_p1 = $unsigned(tmp_2_cast_fu_826_p1);

assign tmp_45_i1_fu_1076_p1 = $unsigned(tmp_i1_cast_fu_1072_p1);

assign tmp_45_i2_fu_1163_p1 = $unsigned(tmp_i2_cast_fu_1159_p1);

assign tmp_45_i3_fu_1221_p1 = $unsigned(tmp_i3_cast_fu_1217_p1);

assign tmp_45_i_fu_1018_p1 = $unsigned(tmp_i_cast_fu_1014_p1);

assign tmp_46_i1_cast_fu_1090_p1 = $signed(tmp_46_i1_fu_1084_p2);

assign tmp_46_i1_fu_1084_p2 = ($signed(tmp_i1_cast1_fu_1081_p1) + $signed(11'd1));

assign tmp_46_i2_cast_fu_1174_p1 = $signed(tmp_46_i2_fu_1168_p2);

assign tmp_46_i2_fu_1168_p2 = ($signed(tmp_i2_cast1_fu_1155_p1) + $signed(11'd1));

assign tmp_46_i3_cast_fu_1262_p1 = $signed(tmp_46_i3_fu_1256_p2);

assign tmp_46_i3_fu_1256_p2 = ($signed(tmp_i3_cast1_fu_1253_p1) + $signed(11'd1));

assign tmp_46_i_cast_fu_1029_p1 = $signed(tmp_46_i_fu_1023_p2);

assign tmp_46_i_fu_1023_p2 = ($signed(tmp_i_cast1_fu_1010_p1) + $signed(11'd1));

assign tmp_47_i1_fu_1094_p1 = $unsigned(tmp_46_i1_cast_fu_1090_p1);

assign tmp_47_i2_fu_1178_p1 = $unsigned(tmp_46_i2_cast_fu_1174_p1);

assign tmp_47_i3_fu_1266_p1 = $unsigned(tmp_46_i3_cast_fu_1262_p1);

assign tmp_47_i_fu_1033_p1 = $unsigned(tmp_46_i_cast_fu_1029_p1);

assign tmp_48_i1_cast_fu_1105_p1 = $signed(tmp_48_i1_fu_1099_p2);

assign tmp_48_i1_fu_1099_p2 = ($signed(tmp_i1_cast1_fu_1081_p1) + $signed(11'd2));

assign tmp_48_i2_cast_fu_1188_p1 = $signed(tmp_48_i2_fu_1183_p2);

assign tmp_48_i2_fu_1183_p2 = ($signed(tmp_i2_cast1_reg_1657) + $signed(11'd2));

assign tmp_48_i3_cast_fu_1277_p1 = $signed(tmp_48_i3_fu_1271_p2);

assign tmp_48_i3_fu_1271_p2 = ($signed(tmp_i3_cast1_fu_1253_p1) + $signed(11'd2));

assign tmp_48_i_cast_fu_1043_p1 = $signed(tmp_48_i_fu_1038_p2);

assign tmp_48_i_fu_1038_p2 = ($signed(tmp_i_cast1_reg_1599) + $signed(11'd2));

assign tmp_49_i1_fu_1109_p1 = $unsigned(tmp_48_i1_cast_fu_1105_p1);

assign tmp_49_i2_fu_1192_p1 = $unsigned(tmp_48_i2_cast_fu_1188_p1);

assign tmp_49_i3_fu_1281_p1 = $unsigned(tmp_48_i3_cast_fu_1277_p1);

assign tmp_49_i_fu_1047_p1 = $unsigned(tmp_48_i_cast_fu_1043_p1);

assign tmp_4_cast_fu_735_p1 = tmp_reg_1346;

assign tmp_4_fu_532_p1 = zoomHeight_V[94:0];

assign tmp_5_fu_580_p2 = ((updateColorMap == 8'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_708_p3 = ((tmp_24_fu_688_p3[0:0] === 1'b1) ? p_neg_t_reg_1419 : p_lshr_f_fu_704_p1);

assign tmp_7_cast_fu_812_p1 = $signed(tmp_7_fu_806_p2);

assign tmp_7_fu_806_p2 = (p_shl_cast_fu_802_p1 - i_cast1_fu_774_p1);

assign tmp_8_cast_fu_840_p1 = $signed(tmp_8_fu_835_p2);

assign tmp_8_fu_835_p2 = (10'd2 + tmp_7_reg_1473);

assign tmp_9_fu_844_p1 = $unsigned(tmp_8_cast_fu_840_p1);

assign tmp_i1_cast1_fu_1081_p1 = $signed(tmp_i1_reg_1637);

assign tmp_i1_cast8_cast_fu_1052_p1 = loopNum_1_reg_1614;

assign tmp_i1_cast_fu_1072_p1 = $signed(tmp_i1_fu_1066_p2);

assign tmp_i1_fu_1066_p2 = (p_shl_i1_cast_cast_fu_1062_p1 - tmp_i1_cast8_cast_fu_1052_p1);

assign tmp_i2_cast1_fu_1155_p1 = $signed(tmp_i2_fu_1149_p2);

assign tmp_i2_cast7_cast_fu_1135_p1 = loopNum_2_reg_1620;

assign tmp_i2_cast_fu_1159_p1 = $signed(tmp_i2_fu_1149_p2);

assign tmp_i2_fu_1149_p2 = (p_shl_i2_cast_cast_fu_1145_p1 - tmp_i2_cast7_cast_fu_1135_p1);

assign tmp_i3_cast1_fu_1253_p1 = $signed(tmp_i3_reg_1677);

assign tmp_i3_cast6_cast_fu_1197_p1 = loopNum_3_reg_1626;

assign tmp_i3_cast_fu_1217_p1 = $signed(tmp_i3_fu_1211_p2);

assign tmp_i3_fu_1211_p2 = (p_shl_i3_cast_cast_fu_1207_p1 - tmp_i3_cast6_cast_fu_1197_p1);

assign tmp_i_cast1_fu_1010_p1 = $signed(tmp_i_fu_1004_p2);

assign tmp_i_cast9_cast_fu_988_p1 = grp_checkMandelbrot_fu_484_ap_return;

assign tmp_i_cast_fu_1014_p1 = $signed(tmp_i_fu_1004_p2);

assign tmp_i_fu_1004_p2 = (p_shl_i_cast_cast_fu_1000_p1 - tmp_i_cast9_cast_fu_988_p1);

assign tmp_s_fu_552_p1 = $signed(tmp_4_fu_532_p1);

assign val_assign_1_fu_1240_p5 = {{{{s_colorMap_q0}, {s_colorMap_q1}}, {reg_517}}, {reg_512}};

assign val_assign_2_fu_1300_p5 = {{{{s_colorMap_q0}, {s_colorMap_q1}}, {reg_517}}, {reg_512}};

assign val_assign_fu_1122_p5 = {{{{s_colorMap_q0}, {s_colorMap_q1}}, {reg_517}}, {reg_512}};

assign vram_V2_sum_cast_fu_870_p1 = vram_V2_sum_fu_865_p2;

assign vram_V2_sum_fu_865_p2 = (p_0_rec_cast_cast_fu_861_p1 + tmp_4_cast_reg_1452);

assign y_V_1_fu_1336_p2 = (p_Val2_9_reg_429 - stepY_V_reg_1424);

assign y_V_fu_556_p2 = ($signed(tmp_s_fu_552_p1) + $signed(centerY_V));

always @ (posedge ap_clk) begin
    tmp_4_cast_reg_1452[30] <= 1'b0;
    tmp_1_reg_1479[63:32] <= 32'b00000000000000000000000000000000;
    tmp_3_reg_1489[63:32] <= 32'b00000000000000000000000000000000;
    tmp_9_reg_1499[63:32] <= 32'b00000000000000000000000000000000;
    gmem_addr_reg_1517[31] <= 1'b0;
end

endmodule //mandelbrot
